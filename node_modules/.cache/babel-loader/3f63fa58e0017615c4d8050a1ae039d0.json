{"ast":null,"code":"import _slicedToArray from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/pascalchristen/Documents/Development/searchzone-website/src/components/Results.js\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { appendClassName, getUrlSanitizer } from \"@elastic/react-search-ui/view-helpers\"; //import { isFieldValueWrapper } from \"@elastic/react-search-ui\";\n\nfunction getFieldType(result, field, type) {\n  if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n  return getFieldType(result, field, \"raw\");\n}\n\nfunction getSnippet(result, field) {\n  return getFieldType(result, field, \"snippet\");\n}\n\nfunction htmlEscape(str) {\n  if (!str) return \"\";\n  return String(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n\nfunction getEscapedField(result, field) {\n  // Fallback to raw values here, because non-string fields\n  // will not have a snippet fallback. Raw values MUST be html escaped.\n  var safeField = getSnippet(result, field) || htmlEscape(getRaw(result, field));\n  return Array.isArray(safeField) ? safeField.join(\", \") : safeField;\n}\n\nfunction getEscapedFields(result) {\n  return Object.keys(result).reduce(function (acc, field) {\n    // If we receive an arbitrary value from the response, we may not properly\n    // handle it, so we should filter out arbitrary values here.\n    //\n    // I.e.,\n    // Arbitrary value: \"_metaField: '1939191'\"\n    // vs.\n    // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n    //if (!isFieldValueWrapper(result[field])) return acc;\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [field]: getEscapedField(result, field)\n    });\n  }, {});\n}\n\nfunction Result(_ref) {\n  var _this = this;\n\n  var className = _ref.className,\n      result = _ref.result,\n      onClickLink = _ref.onClickLink,\n      titleField = _ref.titleField,\n      urlField = _ref.urlField,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"result\", \"onClickLink\", \"titleField\", \"urlField\"]);\n\n  var fields = getEscapedFields(result);\n  var title = getEscapedField(result, titleField);\n  var url = getUrlSanitizer(URL, window.location)(getRaw(result, urlField));\n  return /*#__PURE__*/React.createElement(\"li\", Object.assign({\n    className: appendClassName(\"sui-result\", className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-result__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, title && !url && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sui-result__title\",\n    dangerouslySetInnerHTML: {\n      __html: title\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }), title && url && /*#__PURE__*/React.createElement(\"a\", {\n    className: \"sui-result__title sui-result__title-link\",\n    dangerouslySetInnerHTML: {\n      __html: title\n    },\n    href: url,\n    onClick: onClickLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sui-result__body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"sui-result__details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, Object.entries(fields).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        fieldName = _ref3[0],\n        fieldValue = _ref3[1];\n\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: fieldName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sui-result__key\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }, fieldName), \" \", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"sui-result__value\",\n      dangerouslySetInnerHTML: {\n        __html: fieldValue\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }));\n  }))));\n}\n\nResult.propTypes = {\n  result: PropTypes.object.isRequired,\n  onClickLink: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  titleField: PropTypes.string,\n  urlField: PropTypes.string\n};\nexport default Result;","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/searchzone-website/src/components/Results.js"],"names":["PropTypes","React","appendClassName","getUrlSanitizer","getFieldType","result","field","type","getRaw","getSnippet","htmlEscape","str","String","replace","getEscapedField","safeField","Array","isArray","join","getEscapedFields","Object","keys","reduce","acc","Result","className","onClickLink","titleField","urlField","rest","fields","title","url","URL","window","location","__html","entries","map","fieldName","fieldValue","propTypes","object","isRequired","func","string"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,uCAAjD,C,CACA;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2C;AACvC,MAAIF,MAAM,CAACC,KAAD,CAAV,EAAmB,OAAOD,MAAM,CAACC,KAAD,CAAN,CAAcC,IAAd,CAAP;AACtB;;AAED,SAASC,MAAT,CAAgBH,MAAhB,EAAwBC,KAAxB,EAA+B;AAC3B,SAAOF,YAAY,CAACC,MAAD,EAASC,KAAT,EAAgB,KAAhB,CAAnB;AACH;;AAED,SAASG,UAAT,CAAoBJ,MAApB,EAA4BC,KAA5B,EAAmC;AAC/B,SAAOF,YAAY,CAACC,MAAD,EAASC,KAAT,EAAgB,SAAhB,CAAnB;AACH;;AAED,SAASI,UAAT,CAAoBC,GAApB,EAAyB;AACrB,MAAI,CAACA,GAAL,EAAU,OAAO,EAAP;AAEV,SAAOC,MAAM,CAACD,GAAD,CAAN,CACFE,OADE,CACM,IADN,EACY,OADZ,EAEFA,OAFE,CAEM,IAFN,EAEY,QAFZ,EAGFA,OAHE,CAGM,IAHN,EAGY,OAHZ,EAIFA,OAJE,CAIM,IAJN,EAIY,MAJZ,EAKFA,OALE,CAKM,IALN,EAKY,MALZ,CAAP;AAMH;;AAED,SAASC,eAAT,CAAyBT,MAAzB,EAAiCC,KAAjC,EAAwC;AACpC;AACA;AACA,MAAMS,SAAS,GACXN,UAAU,CAACJ,MAAD,EAASC,KAAT,CAAV,IAA6BI,UAAU,CAACF,MAAM,CAACH,MAAD,EAASC,KAAT,CAAP,CAD3C;AAEA,SAAOU,KAAK,CAACC,OAAN,CAAcF,SAAd,IAA2BA,SAAS,CAACG,IAAV,CAAe,IAAf,CAA3B,GAAkDH,SAAzD;AACH;;AAED,SAASI,gBAAT,CAA0Bd,MAA1B,EAAkC;AAC9B,SAAOe,MAAM,CAACC,IAAP,CAAYhB,MAAZ,EAAoBiB,MAApB,CAA2B,UAACC,GAAD,EAAMjB,KAAN,EAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAAYiB,GAAZ;AAAiB,OAACjB,KAAD,GAASQ,eAAe,CAACT,MAAD,EAASC,KAAT;AAAzC;AACH,GAVM,EAUJ,EAVI,CAAP;AAWH;;AAED,SAASkB,MAAT,OAOG;AAAA;;AAAA,MANCC,SAMD,QANCA,SAMD;AAAA,MALCpB,MAKD,QALCA,MAKD;AAAA,MAJCqB,WAID,QAJCA,WAID;AAAA,MAHCC,UAGD,QAHCA,UAGD;AAAA,MAFCC,QAED,QAFCA,QAED;AAAA,MADIC,IACJ;;AACC,MAAMC,MAAM,GAAGX,gBAAgB,CAACd,MAAD,CAA/B;AACA,MAAM0B,KAAK,GAAGjB,eAAe,CAACT,MAAD,EAASsB,UAAT,CAA7B;AACA,MAAMK,GAAG,GAAG7B,eAAe,CAAC8B,GAAD,EAAMC,MAAM,CAACC,QAAb,CAAf,CAAsC3B,MAAM,CAACH,MAAD,EAASuB,QAAT,CAA5C,CAAZ;AAEA,sBACI;AAAI,IAAA,SAAS,EAAE1B,eAAe,CAAC,YAAD,EAAeuB,SAAf;AAA9B,KAA6DI,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACI;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,KAAK,IAAI,CAACC,GAAV,iBACG;AACI,IAAA,SAAS,EAAC,mBADd;AAEI,IAAA,uBAAuB,EAAE;AAAEI,MAAAA,MAAM,EAAEL;AAAV,KAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,EAOKA,KAAK,IAAIC,GAAT,iBACG;AACI,IAAA,SAAS,EAAC,0CADd;AAEI,IAAA,uBAAuB,EAAE;AAAEI,MAAAA,MAAM,EAAEL;AAAV,KAF7B;AAGI,IAAA,IAAI,EAAEC,GAHV;AAII,IAAA,OAAO,EAAEN,WAJb;AAKI,IAAA,MAAM,EAAC,QALX;AAMI,IAAA,GAAG,EAAC,qBANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARR,CADJ,eAmBI;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,MAAM,CAACiB,OAAP,CAAeP,MAAf,EAAuBQ,GAAvB,CAA2B;AAAA;AAAA,QAAEC,SAAF;AAAA,QAAaC,UAAb;;AAAA,wBACxB;AAAI,MAAA,GAAG,EAAED,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmCA,SAAnC,CADJ,EACyD,GADzD,eAEI;AACI,MAAA,SAAS,EAAC,mBADd;AAEI,MAAA,uBAAuB,EAAE;AAAEH,QAAAA,MAAM,EAAEI;AAAV,OAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADwB;AAAA,GAA3B,CADL,CADJ,CAnBJ,CADJ;AAmCH;;AAEDhB,MAAM,CAACiB,SAAP,GAAmB;AACfpC,EAAAA,MAAM,EAAEL,SAAS,CAAC0C,MAAV,CAAiBC,UADV;AAEfjB,EAAAA,WAAW,EAAE1B,SAAS,CAAC4C,IAAV,CAAeD,UAFb;AAGflB,EAAAA,SAAS,EAAEzB,SAAS,CAAC6C,MAHN;AAIflB,EAAAA,UAAU,EAAE3B,SAAS,CAAC6C,MAJP;AAKfjB,EAAAA,QAAQ,EAAE5B,SAAS,CAAC6C;AALL,CAAnB;AAQA,eAAerB,MAAf","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport { appendClassName, getUrlSanitizer } from \"@elastic/react-search-ui/view-helpers\";\n//import { isFieldValueWrapper } from \"@elastic/react-search-ui\";\n\nfunction getFieldType(result, field, type) {\n    if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n    return getFieldType(result, field, \"raw\");\n}\n\nfunction getSnippet(result, field) {\n    return getFieldType(result, field, \"snippet\");\n}\n\nfunction htmlEscape(str) {\n    if (!str) return \"\";\n\n    return String(str)\n        .replace(/&/g, \"&amp;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#39;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\");\n}\n\nfunction getEscapedField(result, field) {\n    // Fallback to raw values here, because non-string fields\n    // will not have a snippet fallback. Raw values MUST be html escaped.\n    const safeField =\n        getSnippet(result, field) || htmlEscape(getRaw(result, field));\n    return Array.isArray(safeField) ? safeField.join(\", \") : safeField;\n}\n\nfunction getEscapedFields(result) {\n    return Object.keys(result).reduce((acc, field) => {\n        // If we receive an arbitrary value from the response, we may not properly\n        // handle it, so we should filter out arbitrary values here.\n        //\n        // I.e.,\n        // Arbitrary value: \"_metaField: '1939191'\"\n        // vs.\n        // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n        //if (!isFieldValueWrapper(result[field])) return acc;\n        return { ...acc, [field]: getEscapedField(result, field) };\n    }, {});\n}\n\nfunction Result({\n    className,\n    result,\n    onClickLink,\n    titleField,\n    urlField,\n    ...rest\n}) {\n    const fields = getEscapedFields(result);\n    const title = getEscapedField(result, titleField);\n    const url = getUrlSanitizer(URL, window.location)(getRaw(result, urlField));\n\n    return (\n        <li className={appendClassName(\"sui-result\", className)} {...rest}>\n            <div className=\"sui-result__header\">\n                {title && !url && (\n                    <span\n                        className=\"sui-result__title\"\n                        dangerouslySetInnerHTML={{ __html: title }}\n                    />\n                )}\n                {title && url && (\n                    <a\n                        className=\"sui-result__title sui-result__title-link\"\n                        dangerouslySetInnerHTML={{ __html: title }}\n                        href={url}\n                        onClick={onClickLink}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    />\n                )}\n            </div>\n            <div className=\"sui-result__body\">\n                <ul className=\"sui-result__details\">\n                    {Object.entries(fields).map(([fieldName, fieldValue]) => (\n                        <li key={fieldName}>\n                            <span className=\"sui-result__key\">{fieldName}</span>{\" \"}\n                            <span\n                                className=\"sui-result__value\"\n                                dangerouslySetInnerHTML={{ __html: fieldValue }}\n                            />\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </li>\n    );\n}\n\nResult.propTypes = {\n    result: PropTypes.object.isRequired,\n    onClickLink: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    titleField: PropTypes.string,\n    urlField: PropTypes.string\n};\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}