{"ast":null,"code":"import _objectSpread from\"/Users/pascalchristen/Documents/Development/ch-searchzone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useEffect}from'react';import AppSearchAPIConnector from\"@elastic/search-ui-app-search-connector\";import{makeStyles}from'@material-ui/core/styles';import SearchBoxMaterial from\"../components/StyledSearchBoxMaterial\";import ResultView from\"../components/StyledResult\";//import PagingView from \"../components/PagingView\"\nimport FacetView from\"../components/StyledFacet\";import SortView from\"../components/StyledSort\";//import { Paging as PagingView } from \"@elastic/react-search-ui-views\";\nimport Grid from'@material-ui/core/Grid';import{ErrorBoundary,Facet,SearchProvider//SearchBox,\n,Results,PagingInfo//ResultsPerPage,\n//Paging,\n,Sorting,WithSearch}from\"@elastic/react-search-ui\";import CssBaseline from'@material-ui/core/CssBaseline';//  import \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport{buildAutocompleteQueryConfig,buildFacetConfigFromConfig,buildSearchOptionsFromConfig,buildSortOptionsFromConfig,getConfig,getFacetFields}from\"../config/config-helper\";import LinearProgress from'@material-ui/core/LinearProgress';import{Divider}from\"@material-ui/core\";import StyledPagingInfo from\"../components/StyledPagingInfo\";var _getConfig=getConfig(),hostIdentifier=_getConfig.hostIdentifier,searchKey=_getConfig.searchKey,endpointBase=_getConfig.endpointBase,engineName=_getConfig.engineName;var connector=new AppSearchAPIConnector({searchKey,engineName,hostIdentifier,endpointBase});var config={searchQuery:_objectSpread({facets:buildFacetConfigFromConfig()},buildSearchOptionsFromConfig()),autocompleteQuery:buildAutocompleteQueryConfig(),apiConnector:connector,alwaysSearchOnInitialLoad:true,initialState:{resultsPerPage:10}};var useStyles=makeStyles(function(theme){return{root:{flexGrow:1},ul:{padding:0,marginTop:0,listStyleType:\"none\"},paper:{padding:theme.spacing(2),textAlign:'center',color:theme.palette.text.secondary}};});function SetTitle(searchTerm){useEffect(function(){if(!searchTerm){document.title='Searchzone.ch';}else{document.title=\"\".concat(searchTerm,\" - Searchzone.ch\");}});}export default function Home(){var classes=useStyles();// useEffect((searchTerm) => {\n//     // Update the document title using the browser API\n//     document.title = `You clicked ${searchTerm} times`;\n// });\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(CssBaseline,null),/*#__PURE__*/React.createElement(SearchProvider,{config:config},/*#__PURE__*/React.createElement(WithSearch,{mapContextToProps:function mapContextToProps(_ref){var wasSearched=_ref.wasSearched,isLoading=_ref.isLoading,searchTerm=_ref.searchTerm;return{wasSearched,isLoading,searchTerm};}},function(_ref2){var wasSearched=_ref2.wasSearched,isLoading=_ref2.isLoading,searchTerm=_ref2.searchTerm;SetTitle(searchTerm);return/*#__PURE__*/React.createElement(\"div\",{className:\"App\",style:{padding:20}},/*#__PURE__*/React.createElement(ErrorBoundary,null,/*#__PURE__*/React.createElement(Grid,{container:true,spacing:2},/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:12},/*#__PURE__*/React.createElement(SearchBoxMaterial,null),isLoading&&/*#__PURE__*/React.createElement(LinearProgress,null)),/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:12,md:4,lg:4,xl:3},searchTerm&&wasSearched&&/*#__PURE__*/React.createElement(PagingInfo,{style:{display:'flex',justifyContent:'flex-end'},view:StyledPagingInfo})/*{ <Sorting view={SortView}\n                                                    label={\"Sort by\"}\n                                                    sortOptions={buildSortOptionsFromConfig()}\n                                                /> }*/,getFacetFields().map(function(field){return/*#__PURE__*/React.createElement(Facet,{key:field,view:FacetView,field:field,label:field,isFilterable:true});})),/*#__PURE__*/React.createElement(Grid,{item:true,md:1,lg:1,xl:1},/*#__PURE__*/React.createElement(Divider,{orientation:\"vertical\"})),/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:12,md:6,lg:6,xl:8},/*#__PURE__*/React.createElement(React.Fragment,null,wasSearched&&/*#__PURE__*/React.createElement(Results,{className:classes.ul,resultView:ResultView}))))));})));}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/ch-searchzone/src/views/Home.js"],"names":["React","useEffect","AppSearchAPIConnector","makeStyles","SearchBoxMaterial","ResultView","FacetView","SortView","Grid","ErrorBoundary","Facet","SearchProvider","Results","PagingInfo","Sorting","WithSearch","CssBaseline","buildAutocompleteQueryConfig","buildFacetConfigFromConfig","buildSearchOptionsFromConfig","buildSortOptionsFromConfig","getConfig","getFacetFields","LinearProgress","Divider","StyledPagingInfo","hostIdentifier","searchKey","endpointBase","engineName","connector","config","searchQuery","facets","autocompleteQuery","apiConnector","alwaysSearchOnInitialLoad","initialState","resultsPerPage","useStyles","theme","root","flexGrow","ul","padding","marginTop","listStyleType","paper","spacing","textAlign","color","palette","text","secondary","SetTitle","searchTerm","document","title","Home","classes","wasSearched","isLoading","display","justifyContent","map","field"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport SearchBoxMaterial from \"../components/StyledSearchBoxMaterial\"\nimport ResultView from \"../components/StyledResult\"\n//import PagingView from \"../components/PagingView\"\nimport FacetView from \"../components/StyledFacet\"\nimport SortView from \"../components/StyledSort\"\n//import { Paging as PagingView } from \"@elastic/react-search-ui-views\";\nimport Grid from '@material-ui/core/Grid';\nimport {\n    ErrorBoundary,\n    Facet,\n    SearchProvider,\n    //SearchBox,\n    Results,\n    PagingInfo,\n    //ResultsPerPage,\n    //Paging,\n    Sorting,\n    WithSearch\n} from \"@elastic/react-search-ui\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n//  import \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport {\n    buildAutocompleteQueryConfig,\n    buildFacetConfigFromConfig,\n    buildSearchOptionsFromConfig,\n    buildSortOptionsFromConfig,\n    getConfig,\n    getFacetFields\n} from \"../config/config-helper\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Divider } from \"@material-ui/core\";\nimport StyledPagingInfo from \"../components/StyledPagingInfo\";\nconst { hostIdentifier, searchKey, endpointBase, engineName } = getConfig();\nconst connector = new AppSearchAPIConnector({\n    searchKey,\n    engineName,\n    hostIdentifier,\n    endpointBase\n});\nconst config = {\n    searchQuery: {\n        facets: buildFacetConfigFromConfig(),\n        ...buildSearchOptionsFromConfig()\n    },\n    autocompleteQuery: buildAutocompleteQueryConfig(),\n    apiConnector: connector,\n    alwaysSearchOnInitialLoad: true,\n    initialState: {\n        resultsPerPage: 10\n    }\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    ul: {\n        padding: 0,\n        marginTop: 0,\n        listStyleType: \"none\",\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\nfunction SetTitle(searchTerm) {\n    useEffect(() => {\n        if (!searchTerm) {\n            document.title = 'Searchzone.ch';\n        }\n        else {\n            document.title = `${searchTerm} - Searchzone.ch`;\n        }\n    });\n}\n\nexport default function Home() {\n    const classes = useStyles();\n    // useEffect((searchTerm) => {\n    //     // Update the document title using the browser API\n    //     document.title = `You clicked ${searchTerm} times`;\n    // });\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <SearchProvider config={config}>\n                <WithSearch mapContextToProps={({ wasSearched, isLoading, searchTerm }) => ({ wasSearched, isLoading, searchTerm })}>\n                    {({ wasSearched, isLoading, searchTerm }) => {\n                        SetTitle(searchTerm)\n                        return (\n                            <div className=\"App\" style={{ padding: 20 }} >\n                                <ErrorBoundary>\n                                    {/* <Grid container spacing={3}>\n                                        <Grid item xs={12} sm={12}>\n                                            <Paper className={classes.paper}>xs=12</Paper>\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={4} lg={5} xl={3}>\n                                            <Paper className={classes.paper}>xs=6</Paper>\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={8} lg={7} xl={9}>\n                                            <Paper className={classes.paper}>xs=6</Paper>\n                                    </Grid> */}\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={12} sm={12}>\n                                            {/* //<SearchBox autocompleteSuggestions={true} searchAsYouType={false} autocompleteMinimumCharacters={3} />\n                                            //<CustomizedInputBase></CustomizedInputBase>\n\n                                            // <SearchBox \n                                            //     autocompleteSuggestions={true}\n                                            //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //         <>\n                                            //             <SearchBar\n                                            //                 onRequestSearch={() => console.log('onRequestSearch')}\n                                            //                 style={{\n                                            //                     margin: '0 auto',\n                                            //                     maxWidth: 800\n                                            //                 }}\n                                            //             />\n                                            //             {getAutocomplete()}\n                                            //         </>\n                                            //     )}\n                                            // />\n                                            // <SearchBox\n                                            //     autocompleteView={({ autocompletedResults, getItemProps }) => (\n                                            //         <div className=\"sui-search-box__autocomplete-container\">\n                                            //             {autocompletedResults.map((result, i) => ( \n                                            //                 <div\n                                            //                     {...getItemProps({\n                                            //                         key: result.id.raw,\n                                            //                         item: result\n                                            //                     })}\n                                            //                 >\n                                            //                     Result {i}: {result.title.snippet} \n                                            //                 </div>\n                                            //             ))}\n                                            //         </div>\n                                            //     )}\n                                            // />\n                                            // <SearchBox\n                                            //     autocompleteSuggestions={true}\n                                            //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //         <>\n                                            //         <div className=\"sui-search-box__wrapper\">\n                                            //                 <Input {...getInputProps({ placeholder: 'Search games' })} />\n                                            //             {getAutocomplete()}\n                                            //         </div>\n                                            //         <button {...getButtonProps()}>\n                                            //             <svg viewBox=\"0 0 250 250\" width=\"20\" height=\"20\" role=\"img\">\n                                            //             <title>Search</title>\n                                            //             <path d=\"M244.186 214.604l-54.379-54.378c-.289-.289-.628-.491-.93-.76 10.7-16.231 16.945-35.66 16.945-56.554C205.822 46.075 159.747 0 102.911 0S0 46.075 0 102.911c0 56.835 46.074 102.911 102.91 102.911 20.895 0 40.323-6.245 56.554-16.945.269.301.47.64.759.929l54.38 54.38c8.169 8.168 21.413 8.168 29.583 0 8.168-8.169 8.168-21.413 0-29.582zm-141.275-44.458c-37.134 0-67.236-30.102-67.236-67.235 0-37.134 30.103-67.236 67.236-67.236 37.132 0 67.235 30.103 67.235 67.236s-30.103 67.235-67.235 67.235z\" />\n                                            //             </svg>\n                                            //         </button>\n                                            //         </>\n                                            //     )}\n                                            //     />*/}\n                                            <SearchBoxMaterial />\n                                            {/* <Divider /> */}\n\n                                            {isLoading && (\n                                                <LinearProgress />\n                                            )}\n                                        </Grid>\n                                        {/* <Grid item xs={12} sm={12}>\n                                            {searchTerm && wasSearched && (\n                                                <>\n                                                    <PagingInfo style={{ display: 'flex', justifyContent: 'flex-end' }}\n                                                        view={({ start, end, searchTerm, totalResults }) => (\n                                                            <Breadcrumbs aria-label=\"breadcrumb\">\n                                                                <Typography color=\"textPrimary\">{\"Results for \" + searchTerm}</Typography>\n                                                                <Typography color=\"textPrimary\">{totalResults}</Typography>\n                                                            </Breadcrumbs>\n                                                        )}\n                                                    />\n                                                    <Sorting view={SortView}\n                                                        label={\"Sort by\"}\n                                                        sortOptions={buildSortOptionsFromConfig()}\n                                                    />\n                                                </>\n                                            )}\n                                        </Grid> */}\n                                        {/* // <SearchBox\n                                            // autocompleteSuggestions={true}\n                                            // inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //     <>\n                                            //         <Autocomplete\n                                            //             id=\"free-solo-demo\"\n                                            //             freeSolo\n                                            //             options={getAutocomplete()}\n                                            //             renderInput={(getInputProps) => (\n                                            //                 <TextField {...getInputProps} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n                                            //             )}\n                                            //         />\n                                            //         <TextField {...getInputProps({ placeholder: 'Search games' })} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n                                            //     </>\n                                            // )}\n                                            // /> */}\n                                        {/* <Grid item xs={12}>\n                                            <React.Fragment>\n                                                {wasSearched && <PagingInfo />}\n                                                {wasSearched && <ResultsPerPage options={[5, 10, 15]} />}\n                                            </React.Fragment>\n                                        </Grid> */}\n                                        <Grid item xs={12} sm={12} md={4} lg={4} xl={3}>\n                                            {searchTerm && wasSearched && (\n                                                <PagingInfo style={{ display: 'flex', justifyContent: 'flex-end' }} view={StyledPagingInfo} />\n                                                /*{ <Sorting view={SortView}\n                                                    label={\"Sort by\"}\n                                                    sortOptions={buildSortOptionsFromConfig()}\n                                                /> }*/\n\n                                            )}\n                                            {getFacetFields().map(field => (\n                                                <Facet key={field} view={FacetView} field={field} label={field} isFilterable={true} />\n                                            ))}\n\n                                        </Grid>\n                                        <Grid item md={1} lg={1} xl={1}>\n                                            <Divider orientation='vertical' />\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={6} lg={6} xl={8}>\n                                            <>\n                                                {wasSearched && (\n                                                    <Results className={classes.ul} resultView={ResultView} />\n                                                )}\n                                            </>\n                                        </Grid>\n\n                                        {/* <Grid item xs={12} sm={12}>\n                                            <Paging view={PagingView} />\n                                            {/* <Paging\n                                                    view={({ totalPages, onChange, current, page}) => (\n                                                        <div className=\"paging-info\">\n                                                            <Pagination count={totalPages} color=\"primary\" onChange={onChange} />\n                                                        </div>\n\n                                                    )}\n                                                /> }\n                                            <Paging\n                                                view={props =>\n                                                    PagingView({\n                                                        ...props,\n                                                        onChange: page => {\n                                                            reportChange(page);\n                                                            return props.onChange(page);\n                                                        }\n                                                    })\n                                                }\n                                            />\n\n                                        </Grid> */}\n                                    </Grid>\n                                </ErrorBoundary>\n                            </div>\n                        );\n                    }}\n                </WithSearch>\n            </SearchProvider>\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}