{"ast":null,"code":"import _objectSpread from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/pascalchristen/Documents/Development/searchzone-website/src/views/Home.js\";\nimport React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport SearchBoxMaterial from \"../components/SearchBoxMaterial\";\nimport ResultView from \"../components/DomainResult\";\nimport PacmanLoader from \"react-spinners/ScaleLoader\";\nimport { ErrorBoundary, Facet, SearchProvider, SearchBox, Results, PagingInfo, ResultsPerPage, Paging, Sorting, WithSearch } from \"@elastic/react-search-ui\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Layout } from \"@elastic/react-search-ui-views\";\nimport \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport { buildAutocompleteQueryConfig, buildFacetConfigFromConfig, buildSearchOptionsFromConfig, buildSortOptionsFromConfig, getConfig, getFacetFields } from \"../config/config-helper\";\n\nvar _getConfig = getConfig(),\n    hostIdentifier = _getConfig.hostIdentifier,\n    searchKey = _getConfig.searchKey,\n    endpointBase = _getConfig.endpointBase,\n    engineName = _getConfig.engineName;\n\nvar connector = new AppSearchAPIConnector({\n  searchKey,\n  engineName,\n  hostIdentifier,\n  endpointBase\n});\nvar config = {\n  searchQuery: _objectSpread({\n    facets: buildFacetConfigFromConfig()\n  }, buildSearchOptionsFromConfig()),\n  autocompleteQuery: buildAutocompleteQueryConfig(),\n  apiConnector: connector,\n  alwaysSearchOnInitialLoad: true,\n  initialState: {\n    resultsPerPage: 5\n  }\n};\nexport default function Home() {\n  var _this = this;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SearchProvider, {\n    config: config,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(WithSearch, {\n    mapContextToProps: function mapContextToProps(_ref) {\n      var wasSearched = _ref.wasSearched,\n          isLoading = _ref.isLoading;\n      return {\n        wasSearched,\n        isLoading\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, function (_ref2) {\n    var wasSearched = _ref2.wasSearched,\n        isLoading = _ref2.isLoading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBoundary, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Layout, {\n      header:\n      /*#__PURE__*/\n      //<SearchBox autocompleteSuggestions={true} searchAsYouType={false} autocompleteMinimumCharacters={3} />\n      //<CustomizedInputBase></CustomizedInputBase>\n      // <SearchBox\n      //     autocompleteSuggestions={true}\n      //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n      //         <>\n      //             <SearchBar\n      //                 onRequestSearch={() => console.log('onRequestSearch')}\n      //                 style={{\n      //                     margin: '0 auto',\n      //                     maxWidth: 800\n      //                 }}\n      //             />\n      //             {getAutocomplete()}\n      //         </>\n      //     )}\n      // />\n      // <SearchBox\n      //     autocompleteView={({ autocompletedResults, getItemProps }) => (\n      //         <div className=\"sui-search-box__autocomplete-container\">\n      //             {autocompletedResults.map((result, i) => ( \n      //                 <div\n      //                     {...getItemProps({\n      //                         key: result.id.raw,\n      //                         item: result\n      //                     })}\n      //                 >\n      //                     Result {i}: {result.title.snippet} \n      //                 </div>\n      //             ))}\n      //         </div>\n      //     )}\n      // />\n      // <SearchBox\n      //     autocompleteSuggestions={true}\n      //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n      //         <>\n      //         <div className=\"sui-search-box__wrapper\">\n      //                 <Input {...getInputProps({ placeholder: 'Search games' })} />\n      //             {getAutocomplete()}\n      //         </div>\n      //         <button {...getButtonProps()}>\n      //             <svg viewBox=\"0 0 250 250\" width=\"20\" height=\"20\" role=\"img\">\n      //             <title>Search</title>\n      //             <path d=\"M244.186 214.604l-54.379-54.378c-.289-.289-.628-.491-.93-.76 10.7-16.231 16.945-35.66 16.945-56.554C205.822 46.075 159.747 0 102.911 0S0 46.075 0 102.911c0 56.835 46.074 102.911 102.91 102.911 20.895 0 40.323-6.245 56.554-16.945.269.301.47.64.759.929l54.38 54.38c8.169 8.168 21.413 8.168 29.583 0 8.168-8.169 8.168-21.413 0-29.582zm-141.275-44.458c-37.134 0-67.236-30.102-67.236-67.235 0-37.134 30.103-67.236 67.236-67.236 37.132 0 67.235 30.103 67.235 67.236s-30.103 67.235-67.235 67.235z\" />\n      //             </svg>\n      //         </button>\n      //         </>\n      //     )}\n      //     />\n      React.createElement(SearchBoxMaterial, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 45\n        }\n      }) // <SearchBox\n      // autocompleteSuggestions={true}\n      // inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n      //     <>\n      //         <Autocomplete\n      //             id=\"free-solo-demo\"\n      //             freeSolo\n      //             options={getAutocomplete()}\n      //             renderInput={(getInputProps) => (\n      //                 <TextField {...getInputProps} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n      //             )}\n      //         />\n      //         <TextField {...getInputProps({ placeholder: 'Search games' })} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n      //     </>\n      // )}\n      // />\n      ,\n      sideContent: /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 45\n        }\n      }, !isLoading && wasSearched && /*#__PURE__*/React.createElement(Sorting, {\n        label: \"Sort by\",\n        sortOptions: buildSortOptionsFromConfig(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 53\n        }\n      }), getFacetFields().map(function (field) {\n        return /*#__PURE__*/React.createElement(Facet, {\n          key: field,\n          field: field,\n          label: field,\n          isFilterable: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 53\n          }\n        });\n      })),\n      bodyContent: /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 45\n        }\n      }, isLoading && /*#__PURE__*/React.createElement(PacmanLoader, {\n        size: 100,\n        color: \"blue\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 53\n        }\n      }), wasSearched && /*#__PURE__*/React.createElement(Results, {\n        titleField: \"name\",\n        urlField: \"image_url\",\n        resultView: ResultView,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 53\n        }\n      })),\n      bodyHeader: /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 45\n        }\n      }, wasSearched && /*#__PURE__*/React.createElement(PagingInfo, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 65\n        }\n      }), wasSearched && /*#__PURE__*/React.createElement(ResultsPerPage, {\n        options: [5, 10, 15],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 65\n        }\n      })),\n      bodyFooter: /*#__PURE__*/React.createElement(Paging, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 53\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 37\n      }\n    })));\n  })));\n}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/searchzone-website/src/views/Home.js"],"names":["React","AppSearchAPIConnector","SearchBoxMaterial","ResultView","PacmanLoader","ErrorBoundary","Facet","SearchProvider","SearchBox","Results","PagingInfo","ResultsPerPage","Paging","Sorting","WithSearch","CssBaseline","Layout","buildAutocompleteQueryConfig","buildFacetConfigFromConfig","buildSearchOptionsFromConfig","buildSortOptionsFromConfig","getConfig","getFacetFields","hostIdentifier","searchKey","endpointBase","engineName","connector","config","searchQuery","facets","autocompleteQuery","apiConnector","alwaysSearchOnInitialLoad","initialState","resultsPerPage","Home","wasSearched","isLoading","map","field"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport SearchBoxMaterial from \"../components/SearchBoxMaterial\"\nimport ResultView from \"../components/DomainResult\"\nimport PacmanLoader from \"react-spinners/ScaleLoader\";\nimport {\n    ErrorBoundary,\n    Facet,\n    SearchProvider,\n    SearchBox,\n    Results,\n    PagingInfo,\n    ResultsPerPage,\n    Paging,\n    Sorting,\n    WithSearch\n} from \"@elastic/react-search-ui\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Layout } from \"@elastic/react-search-ui-views\";\nimport \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport {\n    buildAutocompleteQueryConfig,\n    buildFacetConfigFromConfig,\n    buildSearchOptionsFromConfig,\n    buildSortOptionsFromConfig,\n    getConfig,\n    getFacetFields\n} from \"../config/config-helper\";\n\nconst { hostIdentifier, searchKey, endpointBase, engineName } = getConfig();\nconst connector = new AppSearchAPIConnector({\n    searchKey,\n    engineName,\n    hostIdentifier,\n    endpointBase\n});\nconst config = {\n    searchQuery: {\n        facets: buildFacetConfigFromConfig(),\n        ...buildSearchOptionsFromConfig()\n    },\n    autocompleteQuery: buildAutocompleteQueryConfig(),\n    apiConnector: connector,\n    alwaysSearchOnInitialLoad: true,\n    initialState: {\n        resultsPerPage: 5\n    }\n};\n\nexport default function Home() {\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <SearchProvider config={config}>\n\n                <WithSearch mapContextToProps={({ wasSearched, isLoading }) => ({ wasSearched, isLoading })}>\n                    {({ wasSearched, isLoading }) => {\n                        return (\n                            <div className=\"App\">\n                                <ErrorBoundary>\n                                    <Layout\n                                        header={\n                                            //<SearchBox autocompleteSuggestions={true} searchAsYouType={false} autocompleteMinimumCharacters={3} />\n                                            //<CustomizedInputBase></CustomizedInputBase>\n\n                                            // <SearchBox\n                                            //     autocompleteSuggestions={true}\n                                            //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //         <>\n                                            //             <SearchBar\n                                            //                 onRequestSearch={() => console.log('onRequestSearch')}\n                                            //                 style={{\n                                            //                     margin: '0 auto',\n                                            //                     maxWidth: 800\n                                            //                 }}\n                                            //             />\n                                            //             {getAutocomplete()}\n                                            //         </>\n                                            //     )}\n                                            // />\n                                            // <SearchBox\n                                            //     autocompleteView={({ autocompletedResults, getItemProps }) => (\n                                            //         <div className=\"sui-search-box__autocomplete-container\">\n                                            //             {autocompletedResults.map((result, i) => ( \n                                            //                 <div\n                                            //                     {...getItemProps({\n                                            //                         key: result.id.raw,\n                                            //                         item: result\n                                            //                     })}\n                                            //                 >\n                                            //                     Result {i}: {result.title.snippet} \n                                            //                 </div>\n                                            //             ))}\n                                            //         </div>\n                                            //     )}\n                                            // />\n                                                // <SearchBox\n                                                //     autocompleteSuggestions={true}\n                                                //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                                //         <>\n                                                //         <div className=\"sui-search-box__wrapper\">\n                                                //                 <Input {...getInputProps({ placeholder: 'Search games' })} />\n                                                //             {getAutocomplete()}\n                                                //         </div>\n                                                //         <button {...getButtonProps()}>\n                                                //             <svg viewBox=\"0 0 250 250\" width=\"20\" height=\"20\" role=\"img\">\n                                                //             <title>Search</title>\n                                                //             <path d=\"M244.186 214.604l-54.379-54.378c-.289-.289-.628-.491-.93-.76 10.7-16.231 16.945-35.66 16.945-56.554C205.822 46.075 159.747 0 102.911 0S0 46.075 0 102.911c0 56.835 46.074 102.911 102.91 102.911 20.895 0 40.323-6.245 56.554-16.945.269.301.47.64.759.929l54.38 54.38c8.169 8.168 21.413 8.168 29.583 0 8.168-8.169 8.168-21.413 0-29.582zm-141.275-44.458c-37.134 0-67.236-30.102-67.236-67.235 0-37.134 30.103-67.236 67.236-67.236 37.132 0 67.235 30.103 67.235 67.236s-30.103 67.235-67.235 67.235z\" />\n                                                //             </svg>\n                                                //         </button>\n                                                //         </>\n                                                //     )}\n                                                //     />\n                                            <SearchBoxMaterial></SearchBoxMaterial>\n                                            // <SearchBox\n                                            // autocompleteSuggestions={true}\n                                            // inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //     <>\n                                            //         <Autocomplete\n                                            //             id=\"free-solo-demo\"\n                                            //             freeSolo\n                                            //             options={getAutocomplete()}\n                                            //             renderInput={(getInputProps) => (\n                                            //                 <TextField {...getInputProps} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n                                            //             )}\n                                            //         />\n                                            //         <TextField {...getInputProps({ placeholder: 'Search games' })} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n                                            //     </>\n                                            // )}\n                                            // />\n                                        }\n                                        sideContent={\n                                            <div>\n                                                {!isLoading && wasSearched && (\n                                                    <Sorting\n                                                        label={\"Sort by\"}\n                                                        sortOptions={buildSortOptionsFromConfig()}\n                                                    />\n                                                )}\n                                                {getFacetFields().map(field => (\n                                                    <Facet key={field} field={field} label={field} isFilterable={true} />\n                                                ))}\n                                            </div>\n                                        }\n                                        bodyContent={\n                                            <div>\n\n                                                {isLoading && (\n                                                    <PacmanLoader size={100} color=\"blue\" />\n                                                )}\n                                                {wasSearched && (\n                                                    <Results titleField=\"name\"\n                                                        urlField=\"image_url\"\n                                                        resultView={ResultView}\n                                                    />\n                                                    \n                                                )}\n                                            </div>\n                                        }\n                                        bodyHeader={\n                                            <React.Fragment>\n                                                {wasSearched && <PagingInfo />}\n                                                {wasSearched && <ResultsPerPage options={[5, 10, 15]} />}\n                                            </React.Fragment>\n                                        }\n                                        bodyFooter={<Paging />}\n                                    />\n                                </ErrorBoundary>\n                            </div>\n                        );\n                    }}\n                </WithSearch>\n            </SearchProvider>\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}