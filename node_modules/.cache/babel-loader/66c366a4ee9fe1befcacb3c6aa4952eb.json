{"ast":null,"code":"import _objectWithoutProperties from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/pascalchristen/Documents/Development/searchzone-website/src/App.js\";\n\nimport React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport PacmanLoader from \"react-spinners/ScaleLoader\";\nimport { ErrorBoundary, Facet, SearchProvider, SearchBox, Results, PagingInfo, ResultsPerPage, Paging, Sorting, WithSearch } from \"@elastic/react-search-ui\";\nimport { Layout } from \"@elastic/react-search-ui-views\";\nimport \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport { buildAutocompleteQueryConfig, buildFacetConfigFromConfig, buildSearchOptionsFromConfig, buildSortOptionsFromConfig, getConfig, getFacetFields } from \"./config/config-helper\";\n\nvar _getConfig = getConfig(),\n    hostIdentifier = _getConfig.hostIdentifier,\n    searchKey = _getConfig.searchKey,\n    endpointBase = _getConfig.endpointBase,\n    engineName = _getConfig.engineName;\n\nvar connector = new AppSearchAPIConnector({\n  searchKey,\n  engineName,\n  hostIdentifier,\n  endpointBase\n});\nvar config = {\n  searchQuery: _objectSpread({\n    facets: buildFacetConfigFromConfig()\n  }, buildSearchOptionsFromConfig()),\n  autocompleteQuery: buildAutocompleteQueryConfig(),\n  apiConnector: connector,\n  alwaysSearchOnInitialLoad: true\n};\n\nvar PagingInfoView = function PagingInfoView(_ref) {\n  var start = _ref.start,\n      end = _ref.end,\n      searchTerm = _ref.searchTerm;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"paging-info\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, start, \" - \", end, \" - \", searchTerm));\n};\n\nvar SearchBoxView = function SearchBoxView(_ref2) {\n  var onChange = _ref2.onChange,\n      searchTerm = _ref2.searchTerm,\n      _onSubmit = _ref2.onSubmit,\n      autocompletedResults = _ref2.autocompletedResults;\n  return /*#__PURE__*/React.createElement(Downshift, Object.assign({\n    inputValue: value,\n    onChange: onSelectAutocomplete,\n    onInputValueChange: function onInputValueChange(newValue) {\n      // To avoid over dispatching\n      if (value === newValue) return;\n      onChange(newValue);\n    } // Because when a selection is made, we don't really want to change\n    // the inputValue. This is supposed to be a \"controlled\" value, and when\n    // this happens we lose control of it.\n    ,\n    itemToString: function itemToString() {\n      return value;\n    }\n  }, rest, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }\n  }), function (downshiftProps) {\n    var closeMenu = downshiftProps.closeMenu,\n        _getInputProps = downshiftProps.getInputProps,\n        isOpen = downshiftProps.isOpen;\n    var autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: function onSubmit(e) {\n        closeMenu();\n\n        _onSubmit(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: appendClassName(\"sui-search-box\", className) + autocompleteClass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputView, Object.assign({}, downshiftProps, {\n      getInputProps: function getInputProps(additionalProps) {\n        var _ref3 = additionalProps || {},\n            className = _ref3.className,\n            rest = _objectWithoutProperties(_ref3, [\"className\"]);\n\n        return _getInputProps(_objectSpread(_objectSpread({\n          placeholder: \"Search\"\n        }, inputProps), {}, {\n          className: appendClassName(\"sui-search-box__text-input\", [inputProps.className, className, focusedClass])\n        }, rest));\n      },\n      getButtonProps: function getButtonProps(additionalProps) {\n        var _ref4 = additionalProps || {},\n            className = _ref4.className,\n            rest = _objectWithoutProperties(_ref4, [\"className\"]);\n\n        return _objectSpread({\n          type: \"submit\",\n          value: \"Search\",\n          className: appendClassName(\"button sui-search-box__submit\", className)\n        }, rest);\n      },\n      getAutocomplete: function getAutocomplete() {\n        if (useAutocomplete && isOpen && allAutocompletedItemsCount > 0) {\n          return /*#__PURE__*/React.createElement(AutocompleteView, Object.assign({}, props, downshiftProps, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 26\n            }\n          }));\n        } else {\n          return null;\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }))));\n  });\n};\n\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    titleField: PropTypes.string.isRequired,\n    urlField: PropTypes.string.isRequired,\n    linkTarget: PropTypes.string,\n    sectionTitle: PropTypes.string\n  })]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }), PropTypes.objectOf(PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }))]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\nexport default function App() {\n  var _this2 = this;\n\n  return /*#__PURE__*/React.createElement(SearchProvider, {\n    config: config,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WithSearch, {\n    mapContextToProps: function mapContextToProps(_ref5) {\n      var searchTerm = _ref5.searchTerm,\n          setSearchTerm = _ref5.setSearchTerm,\n          results = _ref5.results,\n          isLoading = _ref5.isLoading;\n      return {\n        searchTerm,\n        setSearchTerm,\n        results,\n        isLoading\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, function (_ref6) {\n    var searchTerm = _ref6.searchTerm,\n        setSearchTerm = _ref6.setSearchTerm,\n        results = _ref6.results,\n        isLoading = _ref6.isLoading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchBox, {\n      view: SearchBoxView,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      value: searchTerm,\n      onChange: function onChange(e) {\n        return setSearchTerm(e.target.value);\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }, isLoading && /*#__PURE__*/React.createElement(PacmanLoader, {\n      size: 100,\n      color: \"blue\",\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    })), results.map(function (r) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: r.id,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }\n      }, r.domain.raw);\n    }), /*#__PURE__*/React.createElement(PagingInfo, {\n      view: PagingInfoView,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    }));\n  }));\n}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/searchzone-website/src/App.js"],"names":["React","AppSearchAPIConnector","PacmanLoader","ErrorBoundary","Facet","SearchProvider","SearchBox","Results","PagingInfo","ResultsPerPage","Paging","Sorting","WithSearch","Layout","buildAutocompleteQueryConfig","buildFacetConfigFromConfig","buildSearchOptionsFromConfig","buildSortOptionsFromConfig","getConfig","getFacetFields","hostIdentifier","searchKey","endpointBase","engineName","connector","config","searchQuery","facets","autocompleteQuery","apiConnector","alwaysSearchOnInitialLoad","PagingInfoView","start","end","searchTerm","SearchBoxView","onChange","onSubmit","autocompletedResults","value","onSelectAutocomplete","newValue","rest","downshiftProps","closeMenu","getInputProps","isOpen","autocompleteClass","e","appendClassName","className","additionalProps","placeholder","inputProps","focusedClass","type","useAutocomplete","allAutocompletedItemsCount","props","propTypes","PropTypes","number","isRequired","arrayOf","Result","autocompletedSuggestions","objectOf","Suggestion","autocompletedSuggestionsCount","completeSuggestion","func","notifyAutocompleteSelected","string","autocompleteResults","oneOfType","bool","shape","titleField","urlField","linkTarget","sectionTitle","autocompleteView","autocompleteSuggestions","exact","object","inputView","isFocused","App","setSearchTerm","results","isLoading","target","map","r","id","domain","raw"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport PacmanLoader from \"react-spinners/ScaleLoader\";\nimport {\n  ErrorBoundary,\n  Facet,\n  SearchProvider,\n  SearchBox,\n  Results,\n  PagingInfo,\n  ResultsPerPage,\n  Paging,\n  Sorting,\n  WithSearch\n} from \"@elastic/react-search-ui\";\nimport { Layout } from \"@elastic/react-search-ui-views\";\nimport \"@elastic/react-search-ui-views/lib/styles/styles.css\";\n\nimport {\n  buildAutocompleteQueryConfig,\n  buildFacetConfigFromConfig,\n  buildSearchOptionsFromConfig,\n  buildSortOptionsFromConfig,\n  getConfig,\n  getFacetFields\n} from \"./config/config-helper\";\n\nconst { hostIdentifier, searchKey, endpointBase, engineName } = getConfig();\nconst connector = new AppSearchAPIConnector({\n  searchKey,\n  engineName,\n  hostIdentifier,\n  endpointBase\n});\nconst config = {\n  searchQuery: {\n    facets: buildFacetConfigFromConfig(),\n    ...buildSearchOptionsFromConfig()\n  },\n  autocompleteQuery: buildAutocompleteQueryConfig(),\n  apiConnector: connector,\n  alwaysSearchOnInitialLoad: true\n};\n\nconst PagingInfoView = ({ start, end, searchTerm }) => (\n  <div className=\"paging-info\">\n    <strong>\n      {start} - {end} - {searchTerm}\n    </strong>\n  </div>\n);\n\nconst SearchBoxView = ({ onChange, searchTerm, onSubmit, autocompletedResults }) => (\n  <Downshift\n    inputValue={value}\n    onChange={onSelectAutocomplete}\n    onInputValueChange={newValue => {\n      // To avoid over dispatching\n      if (value === newValue) return;\n      onChange(newValue);\n    }}\n    // Because when a selection is made, we don't really want to change\n    // the inputValue. This is supposed to be a \"controlled\" value, and when\n    // this happens we lose control of it.\n    itemToString={() => value}\n    {...rest}\n  >\n    {downshiftProps => {\n      const { closeMenu, getInputProps, isOpen } = downshiftProps;\n      let autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n      return (\n        <form\n          onSubmit={e => {\n            closeMenu();\n            onSubmit(e);\n          }}\n        >\n          <div\n            className={\n              appendClassName(\"sui-search-box\", className) + autocompleteClass\n            }\n          >\n            <InputView\n              {...downshiftProps}\n              getInputProps={additionalProps => {\n                const { className, ...rest } = additionalProps || {};\n                return getInputProps({\n                  placeholder: \"Search\",\n                  ...inputProps,\n                  className: appendClassName(\"sui-search-box__text-input\", [\n                    inputProps.className,\n                    className,\n                    focusedClass\n                  ]),\n                  ...rest\n                });\n              }}\n              getButtonProps={additionalProps => {\n                const { className, ...rest } = additionalProps || {};\n                return {\n                  type: \"submit\",\n                  value: \"Search\",\n                  className: appendClassName(\n                    \"button sui-search-box__submit\",\n                    className\n                  ),\n                  ...rest\n                };\n              }}\n              getAutocomplete={() => {\n                if (\n                  useAutocomplete &&\n                  isOpen &&\n                  allAutocompletedItemsCount > 0\n                ) {\n                  return <AutocompleteView {...props} {...downshiftProps} />;\n                } else {\n                  return null;\n                }\n              }}\n            />\n          </div>\n        </form>\n      );\n    }}\n  </Downshift>\n);\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion))\n    .isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.shape({\n      titleField: PropTypes.string.isRequired,\n      urlField: PropTypes.string.isRequired,\n      linkTarget: PropTypes.string,\n      sectionTitle: PropTypes.string\n    })\n  ]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.exact({\n      sectionTitle: PropTypes.string\n    }),\n    PropTypes.objectOf(\n      PropTypes.exact({\n        sectionTitle: PropTypes.string\n      })\n    )\n  ]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\nexport default function App() {\n  return (\n    <SearchProvider config={config}>\n      <WithSearch\n        mapContextToProps={({ searchTerm, setSearchTerm, results, isLoading }) => ({\n          searchTerm,\n          setSearchTerm,\n          results,\n          isLoading\n        })}\n      >\n        {({ searchTerm, setSearchTerm, results, isLoading }) => {\n          return (\n            <div>\n              <SearchBox view={SearchBoxView} />\n              <input\n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n              />\n              <div>\n                {isLoading && (\n                  <PacmanLoader size={100} color=\"blue\" />\n                )}\n              </div>\n              {results.map(r => (\n                <div key={r.id}>{r.domain.raw}</div>\n              ))}\n              <PagingInfo view={PagingInfoView} />\n            </div>\n          );\n        }}\n      </WithSearch>\n    </SearchProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}