{"ast":null,"code":"import _objectSpread from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/pascalchristen/Documents/Development/searchzone-website/src/components/DomainResult.js\";\nimport React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Dns from '@material-ui/icons/Dns';\nimport Divider from '@material-ui/core/Divider';\nimport { TextFields, VpnKey, MailOutline, VerifiedUser, AlternateEmail, Filter6, Filter4, DeleteForever } from '@material-ui/icons'; // const useStyles = makeStyles((theme) => ({\n//     root: {\n//         minWidth: 275,\n//     },\n//     bullet: {\n//         display: 'inline-block',\n//         margin: '0 2px',\n//         transform: 'scale(0.8)',\n//     },\n//     title: {\n//         fontSize: 14,\n//     },\n//     pos: {\n//         marginBottom: 12,\n//     },\n// }));\n\nvar StyledCard = withStyles({\n  root: {\n    marginBottom: '10px'\n  }\n})(Card);\n\nfunction getFieldType(result, field, type) {\n  if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n  return getFieldType(result, field, \"raw\");\n}\n\nfunction htmlEscape(str) {\n  if (!str) return \"\";\n  return String(str).replace(/&/g, \"&amp;\") //.replace(/\"/g, \"&quot;\")\n  .replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n\nexport function isFieldValueWrapper(object) {\n  return object && (object.hasOwnProperty(\"raw\") || object.hasOwnProperty(\"snippet\") && !object.hasOwnProperty(\"score\"));\n}\n\nfunction getEscapedField(result, field) {\n  // Fallback to raw values here, because non-string fields\n  // will not have a snippet fallback. Raw values MUST be html escaped.\n  var safeField = htmlEscape(getRaw(result, field));\n  safeField = safeField.replaceAll(\",\", \"\\n\");\n  return Array.isArray(safeField) ? safeField.join(\",\") : safeField;\n}\n\nfunction getEscapedFields(result) {\n  return Object.keys(result).reduce(function (acc, field) {\n    // If we receive an arbitrary value from the response, we may not properly\n    // handle it, so we should filter out arbitrary values here.\n    //\n    // I.e.,\n    // Arbitrary value: \"_metaField: '1939191'\"\n    // vs.\n    // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n    //if (!isFieldValueWrapper(result[field])) return acc;\n    //console.log(field)\n    if (field === 'id') {} //console.log(\"remove\" + field)\n    //return { ...acc, [field]: getEscapedField(result, field) };\n    //console.log(getEscapedField(result, field))\n\n\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [field]: getEscapedField(result, field)\n    });\n  }, {});\n}\n\nfunction generateListItems(result, icon, field) {\n  var DynamicIconButton = icon;\n  var resultField = result[field];\n  console.log(result);\n\n  if (resultField != undefined) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DynamicIconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      multiline: \"true\",\n      style: {\n        wordWrap: \"break-word\"\n      },\n      primary: resultField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }));\n  }\n}\n\nfunction generateButtonItems(result, icon, field) {\n  var DynamicIconButton = icon;\n  var resultField = result[field]; // console.log(resultField)\n\n  if (resultField != undefined) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {\n      size: \"small\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DynamicIconButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    })));\n  }\n}\n\nexport default function (_ref) {\n  var result = _ref.result;\n  //const classes = useStyles();\n  var fields = getEscapedFields(result); // console.log(fields)\n  // console.log(\"Test\" + isValid(fields?.valid_domain))\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  }, fields.domain, /*#__PURE__*/React.createElement(React.Fragment, null, generateButtonItems(fields, (fields === null || fields === void 0 ? void 0 : fields.valid_domain) === 'true' ? VerifiedUser : DeleteForever, \"valid_domain\"), generateButtonItems(fields, MailOutline, \"valid_info\"))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textPrimary\",\n    style: {\n      whiteSpace: 'pre-line'\n    },\n    component: \"a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 29\n    }\n  }, generateListItems(fields, Dns, \"ns\"), generateListItems(fields, Filter4, \"a\"), generateListItems(fields, Filter6, \"aaaa\"), generateListItems(fields, AlternateEmail, \"mx\"), generateListItems(fields, TextFields, \"txt\"), generateListItems(fields, VpnKey, \"dnskey\"))))));\n}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/searchzone-website/src/components/DomainResult.js"],"names":["React","withStyles","CardActionArea","Card","CardContent","IconButton","Typography","List","ListItem","ListItemIcon","ListItemText","Dns","Divider","TextFields","VpnKey","MailOutline","VerifiedUser","AlternateEmail","Filter6","Filter4","DeleteForever","StyledCard","root","marginBottom","getFieldType","result","field","type","getRaw","htmlEscape","str","String","replace","isFieldValueWrapper","object","hasOwnProperty","getEscapedField","safeField","replaceAll","Array","isArray","join","getEscapedFields","Object","keys","reduce","acc","generateListItems","icon","DynamicIconButton","resultField","console","log","undefined","wordWrap","generateButtonItems","fields","domain","valid_domain","whiteSpace"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,EAA0CC,YAA1C,EAAwDC,cAAxD,EAAwEC,OAAxE,EAAiFC,OAAjF,EAA0FC,aAA1F,QAA+G,oBAA/G,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,UAAU,GAAGpB,UAAU,CAAC;AAC1BqB,EAAAA,IAAI,EAAE;AACFC,IAAAA,YAAY,EAAE;AADZ;AADoB,CAAD,CAAV,CAIhBpB,IAJgB,CAAnB;;AAMA,SAASqB,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2C;AACvC,MAAIF,MAAM,CAACC,KAAD,CAAV,EAAmB,OAAOD,MAAM,CAACC,KAAD,CAAN,CAAcC,IAAd,CAAP;AACtB;;AAED,SAASC,MAAT,CAAgBH,MAAhB,EAAwBC,KAAxB,EAA+B;AAC3B,SAAOF,YAAY,CAACC,MAAD,EAASC,KAAT,EAAgB,KAAhB,CAAnB;AACH;;AACD,SAASG,UAAT,CAAoBC,GAApB,EAAyB;AACrB,MAAI,CAACA,GAAL,EAAU,OAAO,EAAP;AAEV,SAAOC,MAAM,CAACD,GAAD,CAAN,CACFE,OADE,CACM,IADN,EACY,OADZ,EAEH;AAFG,GAGFA,OAHE,CAGM,IAHN,EAGY,OAHZ,EAIFA,OAJE,CAIM,IAJN,EAIY,MAJZ,EAKFA,OALE,CAKM,IALN,EAKY,MALZ,CAAP;AAMH;;AAED,OAAO,SAASC,mBAAT,CAA6BC,MAA7B,EAAqC;AACxC,SACIA,MAAM,KAAKA,MAAM,CAACC,cAAP,CAAsB,KAAtB,KAAgCD,MAAM,CAACC,cAAP,CAAsB,SAAtB,KAAoC,CAACD,MAAM,CAACC,cAAP,CAAsB,OAAtB,CAA1E,CADV;AAGH;;AAED,SAASC,eAAT,CAAyBX,MAAzB,EAAiCC,KAAjC,EAAwC;AACpC;AACA;AACA,MAAIW,SAAS,GACTR,UAAU,CAACD,MAAM,CAACH,MAAD,EAASC,KAAT,CAAP,CADd;AAEAW,EAAAA,SAAS,GAAGA,SAAS,CAACC,UAAV,CAAqB,GAArB,EAA0B,IAA1B,CAAZ;AACA,SAAOC,KAAK,CAACC,OAAN,CAAcH,SAAd,IAA2BA,SAAS,CAACI,IAAV,CAAe,GAAf,CAA3B,GAAiDJ,SAAxD;AACH;;AAED,SAASK,gBAAT,CAA0BjB,MAA1B,EAAkC;AAC9B,SAAOkB,MAAM,CAACC,IAAP,CAAYnB,MAAZ,EAAoBoB,MAApB,CAA2B,UAACC,GAAD,EAAMpB,KAAN,EAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAIA,KAAK,KAAK,IAAd,EAAoB,CAGnB,CAHD,CACI;AACA;AAEJ;;;AACA,2CAAYoB,GAAZ;AAAiB,OAACpB,KAAD,GAASU,eAAe,CAACX,MAAD,EAASC,KAAT;AAAzC;AAEH,GAjBM,EAiBJ,EAjBI,CAAP;AAkBH;;AAED,SAASqB,iBAAT,CAA2BtB,MAA3B,EAAmCuB,IAAnC,EAAyCtB,KAAzC,EAAgD;AAC5C,MAAMuB,iBAAiB,GAAGD,IAA1B;AACA,MAAME,WAAW,GAAGzB,MAAM,CAACC,KAAD,CAA1B;AACAyB,EAAAA,OAAO,CAACC,GAAR,CAAY3B,MAAZ;;AACA,MAAIyB,WAAW,IAAIG,SAAnB,EAA8B;AAC1B,wBACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAII,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,MAAxB;AAA+B,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAtC;AACI,MAAA,OAAO,EAAEJ,WADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ;AAUH;AACJ;;AAED,SAASK,mBAAT,CAA6B9B,MAA7B,EAAqCuB,IAArC,EAA2CtB,KAA3C,EAAkD;AAC9C,MAAMuB,iBAAiB,GAAGD,IAA1B;AACA,MAAME,WAAW,GAAGzB,MAAM,CAACC,KAAD,CAA1B,CAF8C,CAG9C;;AACA,MAAIwB,WAAW,IAAIG,SAAnB,EAA8B;AAC1B,wBACI,uDACA,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAC,OAAjB;AAAyB,MAAA,QAAQ,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,CADJ;AAOH;AACJ;;AAED,eAAe,gBAAsB;AAAA,MAAV5B,MAAU,QAAVA,MAAU;AACjC;AACA,MAAM+B,MAAM,GAAGd,gBAAgB,CAACjB,MAAD,CAA/B,CAFiC,CAGjC;AACA;;AACA,sBACI,uDACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,SAAS,EAAC,IAAnC;AAAwC,IAAA,KAAK,EAAC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK+B,MAAM,CAACC,MADZ,eAEI,0CACMF,mBAAmB,CAACC,MAAD,EAAU,CAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEE,YAAR,MAAyB,MAA1B,GAAoC1C,YAApC,GAAmDI,aAA5D,EAA2E,cAA3E,CADzB,EAEMmC,mBAAmB,CAACC,MAAD,EAASzC,WAAT,EAAsB,YAAtB,CAFzB,CAFJ,CADJ,eASI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAUI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,OAApB;AAA4B,IAAA,KAAK,EAAC,aAAlC;AAAgD,IAAA,KAAK,EAAE;AAAE4C,MAAAA,UAAU,EAAE;AAAd,KAAvD;AAAmF,IAAA,SAAS,EAAC,GAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMZ,iBAAiB,CAACS,MAAD,EAAS7C,GAAT,EAAc,IAAd,CADvB,EAEMoC,iBAAiB,CAACS,MAAD,EAASrC,OAAT,EAAkB,GAAlB,CAFvB,EAGM4B,iBAAiB,CAACS,MAAD,EAAStC,OAAT,EAAkB,MAAlB,CAHvB,EAIM6B,iBAAiB,CAACS,MAAD,EAASvC,cAAT,EAAyB,IAAzB,CAJvB,EAKM8B,iBAAiB,CAACS,MAAD,EAAS3C,UAAT,EAAqB,KAArB,CALvB,EAMMkC,iBAAiB,CAACS,MAAD,EAAS1C,MAAT,EAAiB,QAAjB,CANvB,CADJ,CAVJ,CADR,CADJ,CADJ;AA6BH","sourcesContent":["import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Dns from '@material-ui/icons/Dns';\nimport Divider from '@material-ui/core/Divider';\nimport { TextFields, VpnKey, MailOutline, VerifiedUser, AlternateEmail, Filter6, Filter4, DeleteForever } from '@material-ui/icons';\n\n// const useStyles = makeStyles((theme) => ({\n//     root: {\n//         minWidth: 275,\n//     },\n//     bullet: {\n//         display: 'inline-block',\n//         margin: '0 2px',\n//         transform: 'scale(0.8)',\n//     },\n//     title: {\n//         fontSize: 14,\n//     },\n//     pos: {\n//         marginBottom: 12,\n//     },\n// }));\n\nconst StyledCard = withStyles({\n    root: {\n        marginBottom: '10px',\n    },\n})(Card);\n\nfunction getFieldType(result, field, type) {\n    if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n    return getFieldType(result, field, \"raw\");\n}\nfunction htmlEscape(str) {\n    if (!str) return \"\";\n\n    return String(str)\n        .replace(/&/g, \"&amp;\")\n        //.replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#39;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\");\n}\n\nexport function isFieldValueWrapper(object) {\n    return (\n        object && (object.hasOwnProperty(\"raw\") || object.hasOwnProperty(\"snippet\") && !object.hasOwnProperty(\"score\"))\n    );\n}\n\nfunction getEscapedField(result, field) {\n    // Fallback to raw values here, because non-string fields\n    // will not have a snippet fallback. Raw values MUST be html escaped.\n    let safeField =\n        htmlEscape(getRaw(result, field));\n    safeField = safeField.replaceAll(\",\", \"\\n\");\n    return Array.isArray(safeField) ? safeField.join(\",\") : safeField;\n}\n\nfunction getEscapedFields(result) {\n    return Object.keys(result).reduce((acc, field) => {\n        // If we receive an arbitrary value from the response, we may not properly\n        // handle it, so we should filter out arbitrary values here.\n        //\n        // I.e.,\n        // Arbitrary value: \"_metaField: '1939191'\"\n        // vs.\n        // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n        //if (!isFieldValueWrapper(result[field])) return acc;\n        //console.log(field)\n        if (field === 'id') {\n            //console.log(\"remove\" + field)\n            //return { ...acc, [field]: getEscapedField(result, field) };\n        }\n        //console.log(getEscapedField(result, field))\n        return { ...acc, [field]: getEscapedField(result, field) };\n\n    }, {});\n}\n\nfunction generateListItems(result, icon, field) {\n    const DynamicIconButton = icon;\n    const resultField = result[field]\n    console.log(result)\n    if (resultField != undefined) {\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <DynamicIconButton />\n                </ListItemIcon>\n                <ListItemText multiline=\"true\" style={{ wordWrap: \"break-word\" }}\n                    primary={resultField}\n                />\n            </ListItem>\n        );\n    }\n}\n\nfunction generateButtonItems(result, icon, field) {\n    const DynamicIconButton = icon;\n    const resultField = result[field]\n    // console.log(resultField)\n    if (resultField != undefined) {\n        return (\n            <>\n            <IconButton size=\"small\" disabled>\n                <DynamicIconButton />\n            </IconButton>\n            </>\n        );\n    }\n}\n\nexport default function ({ result }) {\n    //const classes = useStyles();\n    const fields = getEscapedFields(result);\n    // console.log(fields)\n    // console.log(\"Test\" + isValid(fields?.valid_domain))\n    return (\n        <>\n            <StyledCard>\n                    <CardContent>\n                        <Typography variant=\"h5\" component=\"h2\" color=\"primary\">\n                            {fields.domain}\n                            <>\n                                {(generateButtonItems(fields, (fields?.valid_domain === 'true') ? VerifiedUser : DeleteForever, \"valid_domain\"))}\n                                {(generateButtonItems(fields, MailOutline, \"valid_info\"))}\n                            </>\n                        </Typography>\n\n                        <Divider />\n                        <Typography variant=\"body2\" color=\"textPrimary\" style={{ whiteSpace: 'pre-line' }} component=\"a\">\n                            <List>\n                                {(generateListItems(fields, Dns, \"ns\"))}\n                                {(generateListItems(fields, Filter4, \"a\"))}\n                                {(generateListItems(fields, Filter6, \"aaaa\"))}\n                                {(generateListItems(fields, AlternateEmail, \"mx\"))}\n                                {(generateListItems(fields, TextFields, \"txt\"))}\n                                {(generateListItems(fields, VpnKey, \"dnskey\"))}\n                            </List>\n                        </Typography>\n                    </CardContent>\n            </StyledCard>\n\n        </>\n    );\n\n}"]},"metadata":{},"sourceType":"module"}