{"ast":null,"code":"import _objectSpread from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/pascalchristen/Documents/Development/searchzone-website/src/views/Home.js\";\nimport React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport SearchBoxMaterial from \"../components/SearchBoxMaterial\";\nimport ResultView from \"../components/DomainResult\"; //import PagingView from \"../components/PagingView\"\n\nimport FacetView from \"../components/FacetView\";\nimport SortView from \"../components/SortView\";\nimport Typography from '@material-ui/core/Typography';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs'; //import { Paging as PagingView } from \"@elastic/react-search-ui-views\";\n\nimport Grid from '@material-ui/core/Grid';\nimport { ErrorBoundary, Facet, SearchProvider //SearchBox,\n, Results, PagingInfo //ResultsPerPage,\n//Paging,\n, Sorting, WithSearch } from \"@elastic/react-search-ui\";\nimport CssBaseline from '@material-ui/core/CssBaseline'; //  import \"@elastic/react-search-ui-views/lib/styles/styles.css\";\n\nimport { buildAutocompleteQueryConfig, buildFacetConfigFromConfig, buildSearchOptionsFromConfig, buildSortOptionsFromConfig, getConfig, getFacetFields } from \"../config/config-helper\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Divider, FormControl } from \"@material-ui/core\";\n\nvar _getConfig = getConfig(),\n    hostIdentifier = _getConfig.hostIdentifier,\n    searchKey = _getConfig.searchKey,\n    endpointBase = _getConfig.endpointBase,\n    engineName = _getConfig.engineName;\n\nvar connector = new AppSearchAPIConnector({\n  searchKey,\n  engineName,\n  hostIdentifier,\n  endpointBase\n});\nvar config = {\n  searchQuery: _objectSpread({\n    facets: buildFacetConfigFromConfig()\n  }, buildSearchOptionsFromConfig()),\n  autocompleteQuery: buildAutocompleteQueryConfig(),\n  apiConnector: connector,\n  alwaysSearchOnInitialLoad: true,\n  initialState: {\n    resultsPerPage: 10\n  }\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    ul: {\n      padding: 0,\n      marginTop: 0,\n      listStyleType: \"none\"\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary\n    }\n  };\n});\nexport default function Home() {\n  var _this = this;\n\n  var classes = useStyles();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SearchProvider, {\n    config: config,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(WithSearch, {\n    mapContextToProps: function mapContextToProps(_ref) {\n      var wasSearched = _ref.wasSearched,\n          isLoading = _ref.isLoading,\n          searchTerm = _ref.searchTerm;\n      return {\n        wasSearched,\n        isLoading,\n        searchTerm\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, function (_ref2) {\n    var wasSearched = _ref2.wasSearched,\n        isLoading = _ref2.isLoading,\n        searchTerm = _ref2.searchTerm;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        padding: 20\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBoundary, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(SearchBoxMaterial, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 45\n      }\n    }), isLoading && /*#__PURE__*/React.createElement(LinearProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 4,\n      lg: 4,\n      xl: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 41\n      }\n    }, searchTerm && wasSearched && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PagingInfo, {\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end'\n      },\n      view: function view(_ref3) {\n        var start = _ref3.start,\n            end = _ref3.end,\n            searchTerm = _ref3.searchTerm,\n            totalResults = _ref3.totalResults;\n        return /*#__PURE__*/React.createElement(Breadcrumbs, {\n          \"aria-label\": \"breadcrumb\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(Typography, {\n          color: \"textPrimary\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 65\n          }\n        }, \"Results for \" + searchTerm + start + end), /*#__PURE__*/React.createElement(Typography, {\n          color: \"textPrimary\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 65\n          }\n        }, totalResults));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(FormControl, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 45\n      }\n    }, getFacetFields().map(function (field) {\n      return /*#__PURE__*/React.createElement(Facet, {\n        key: field,\n        view: FacetView,\n        field: field,\n        label: field,\n        isFilterable: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 53\n        }\n      });\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 0,\n      sm: 0,\n      md: 1,\n      lg: 1,\n      xl: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Divider, {\n      orientation: \"vertical\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 12,\n      md: 6,\n      lg: 6,\n      xl: 8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, wasSearched && /*#__PURE__*/React.createElement(Results, {\n      className: classes.ul,\n      resultView: ResultView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 53\n      }\n    }))))));\n  })));\n}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/searchzone-website/src/views/Home.js"],"names":["React","AppSearchAPIConnector","makeStyles","SearchBoxMaterial","ResultView","FacetView","SortView","Typography","Breadcrumbs","Grid","ErrorBoundary","Facet","SearchProvider","Results","PagingInfo","Sorting","WithSearch","CssBaseline","buildAutocompleteQueryConfig","buildFacetConfigFromConfig","buildSearchOptionsFromConfig","buildSortOptionsFromConfig","getConfig","getFacetFields","LinearProgress","Divider","FormControl","hostIdentifier","searchKey","endpointBase","engineName","connector","config","searchQuery","facets","autocompleteQuery","apiConnector","alwaysSearchOnInitialLoad","initialState","resultsPerPage","useStyles","theme","root","flexGrow","ul","padding","marginTop","listStyleType","paper","spacing","textAlign","color","palette","text","secondary","Home","classes","wasSearched","isLoading","searchTerm","display","justifyContent","start","end","totalResults","map","field"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport SearchBoxMaterial from \"../components/SearchBoxMaterial\"\nimport ResultView from \"../components/DomainResult\"\n//import PagingView from \"../components/PagingView\"\nimport FacetView from \"../components/FacetView\"\nimport SortView from \"../components/SortView\"\nimport Typography from '@material-ui/core/Typography';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n//import { Paging as PagingView } from \"@elastic/react-search-ui-views\";\nimport Grid from '@material-ui/core/Grid';\nimport {\n    ErrorBoundary,\n    Facet,\n    SearchProvider,\n    //SearchBox,\n    Results,\n    PagingInfo,\n    //ResultsPerPage,\n    //Paging,\n    Sorting,\n    WithSearch\n} from \"@elastic/react-search-ui\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n//  import \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport {\n    buildAutocompleteQueryConfig,\n    buildFacetConfigFromConfig,\n    buildSearchOptionsFromConfig,\n    buildSortOptionsFromConfig,\n    getConfig,\n    getFacetFields\n} from \"../config/config-helper\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Divider, FormControl } from \"@material-ui/core\";\nconst { hostIdentifier, searchKey, endpointBase, engineName } = getConfig();\nconst connector = new AppSearchAPIConnector({\n    searchKey,\n    engineName,\n    hostIdentifier,\n    endpointBase\n});\nconst config = {\n    searchQuery: {\n        facets: buildFacetConfigFromConfig(),\n        ...buildSearchOptionsFromConfig()\n    },\n    autocompleteQuery: buildAutocompleteQueryConfig(),\n    apiConnector: connector,\n    alwaysSearchOnInitialLoad: true,\n    initialState: {\n        resultsPerPage: 10\n    }\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    ul: {\n        padding: 0,\n        marginTop: 0,\n        listStyleType: \"none\",\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\nexport default function Home() {\n    const classes = useStyles();\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <SearchProvider config={config}>\n\n                <WithSearch mapContextToProps={({ wasSearched, isLoading, searchTerm }) => ({ wasSearched, isLoading, searchTerm })}>\n                    {({ wasSearched, isLoading, searchTerm }) => {\n                        return (\n                            <div className=\"App\" style={{ padding: 20 }} >\n                                <ErrorBoundary>\n                                    {/* <Grid container spacing={3}>\n                                        <Grid item xs={12} sm={12}>\n                                            <Paper className={classes.paper}>xs=12</Paper>\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={4} lg={5} xl={3}>\n                                            <Paper className={classes.paper}>xs=6</Paper>\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={8} lg={7} xl={9}>\n                                            <Paper className={classes.paper}>xs=6</Paper>\n                                    </Grid> */}\n                                    <Grid container spacing={2}>\n                                        <Grid item xs={12} sm={12}>\n                                            {/* //<SearchBox autocompleteSuggestions={true} searchAsYouType={false} autocompleteMinimumCharacters={3} />\n                                            //<CustomizedInputBase></CustomizedInputBase>\n\n                                            // <SearchBox \n                                            //     autocompleteSuggestions={true}\n                                            //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //         <>\n                                            //             <SearchBar\n                                            //                 onRequestSearch={() => console.log('onRequestSearch')}\n                                            //                 style={{\n                                            //                     margin: '0 auto',\n                                            //                     maxWidth: 800\n                                            //                 }}\n                                            //             />\n                                            //             {getAutocomplete()}\n                                            //         </>\n                                            //     )}\n                                            // />\n                                            // <SearchBox\n                                            //     autocompleteView={({ autocompletedResults, getItemProps }) => (\n                                            //         <div className=\"sui-search-box__autocomplete-container\">\n                                            //             {autocompletedResults.map((result, i) => ( \n                                            //                 <div\n                                            //                     {...getItemProps({\n                                            //                         key: result.id.raw,\n                                            //                         item: result\n                                            //                     })}\n                                            //                 >\n                                            //                     Result {i}: {result.title.snippet} \n                                            //                 </div>\n                                            //             ))}\n                                            //         </div>\n                                            //     )}\n                                            // />\n                                            // <SearchBox\n                                            //     autocompleteSuggestions={true}\n                                            //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //         <>\n                                            //         <div className=\"sui-search-box__wrapper\">\n                                            //                 <Input {...getInputProps({ placeholder: 'Search games' })} />\n                                            //             {getAutocomplete()}\n                                            //         </div>\n                                            //         <button {...getButtonProps()}>\n                                            //             <svg viewBox=\"0 0 250 250\" width=\"20\" height=\"20\" role=\"img\">\n                                            //             <title>Search</title>\n                                            //             <path d=\"M244.186 214.604l-54.379-54.378c-.289-.289-.628-.491-.93-.76 10.7-16.231 16.945-35.66 16.945-56.554C205.822 46.075 159.747 0 102.911 0S0 46.075 0 102.911c0 56.835 46.074 102.911 102.91 102.911 20.895 0 40.323-6.245 56.554-16.945.269.301.47.64.759.929l54.38 54.38c8.169 8.168 21.413 8.168 29.583 0 8.168-8.169 8.168-21.413 0-29.582zm-141.275-44.458c-37.134 0-67.236-30.102-67.236-67.235 0-37.134 30.103-67.236 67.236-67.236 37.132 0 67.235 30.103 67.235 67.236s-30.103 67.235-67.235 67.235z\" />\n                                            //             </svg>\n                                            //         </button>\n                                            //         </>\n                                            //     )}\n                                            //     />*/}\n                                            <SearchBoxMaterial />\n                                            {/* <Divider /> */}\n\n                                            {isLoading && (\n                                                <LinearProgress />\n                                            )}\n                                        </Grid>\n                                        {/* <Grid item xs={12} sm={12}>\n                                            {searchTerm && wasSearched && (\n                                                <>\n                                                    <PagingInfo style={{ display: 'flex', justifyContent: 'flex-end' }}\n                                                        view={({ start, end, searchTerm, totalResults }) => (\n                                                            <Breadcrumbs aria-label=\"breadcrumb\">\n                                                                <Typography color=\"textPrimary\">{\"Results for \" + searchTerm}</Typography>\n                                                                <Typography color=\"textPrimary\">{totalResults}</Typography>\n                                                            </Breadcrumbs>\n                                                        )}\n                                                    />\n                                                    <Sorting view={SortView}\n                                                        label={\"Sort by\"}\n                                                        sortOptions={buildSortOptionsFromConfig()}\n                                                    />\n                                                </>\n                                            )}\n                                        </Grid> */}\n                                        {/* // <SearchBox\n                                            // autocompleteSuggestions={true}\n                                            // inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //     <>\n                                            //         <Autocomplete\n                                            //             id=\"free-solo-demo\"\n                                            //             freeSolo\n                                            //             options={getAutocomplete()}\n                                            //             renderInput={(getInputProps) => (\n                                            //                 <TextField {...getInputProps} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n                                            //             )}\n                                            //         />\n                                            //         <TextField {...getInputProps({ placeholder: 'Search games' })} label=\"freeSolo\" margin=\"normal\" variant=\"outlined\" />\n                                            //     </>\n                                            // )}\n                                            // /> */}\n                                        {/* <Grid item xs={12}>\n                                            <React.Fragment>\n                                                {wasSearched && <PagingInfo />}\n                                                {wasSearched && <ResultsPerPage options={[5, 10, 15]} />}\n                                            </React.Fragment>\n                                        </Grid> */}\n                                        <Grid item xs={12} sm={12} md={4} lg={4} xl={3}>\n                                            {searchTerm && wasSearched && (\n                                                <>\n                                                    <PagingInfo style={{ display: 'flex', justifyContent: 'flex-end' }}\n                                                        view={({ start, end, searchTerm, totalResults }) => (\n                                                            <Breadcrumbs aria-label=\"breadcrumb\">\n                                                                <Typography color=\"textPrimary\">{\"Results for \" + searchTerm + start + end}</Typography>\n                                                                <Typography color=\"textPrimary\">{totalResults}</Typography>\n                                                            </Breadcrumbs>\n                                                        )}\n                                                    />\n                                                    {/* <Sorting view={SortView}\n                                                        label={\"Sort by\"}\n                                                        sortOptions={buildSortOptionsFromConfig()}\n                                                    /> */}\n                                                </>\n                                            )}\n                                            <FormControl>\n                                                {getFacetFields().map(field => (\n                                                    <Facet key={field} view={FacetView} field={field} label={field} isFilterable={true} />\n                                                ))}\n                                            </FormControl>\n                                            \n                                        </Grid>\n                                        <Grid item xs={0} sm={0} md={1} lg={1} xl={1}>\n                                        <Divider orientation='vertical' />\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={6} lg={6} xl={8}>\n                                            <>\n                                                {wasSearched && (\n                                                    <Results className={classes.ul} resultView={ResultView} />\n                                                )}\n                                            </>\n                                        </Grid>\n\n                                        {/* <Grid item xs={12} sm={12}>\n                                            <Paging view={PagingView} />\n                                            {/* <Paging\n                                                    view={({ totalPages, onChange, current, page}) => (\n                                                        <div className=\"paging-info\">\n                                                            <Pagination count={totalPages} color=\"primary\" onChange={onChange} />\n                                                        </div>\n\n                                                    )}\n                                                /> }\n                                            <Paging\n                                                view={props =>\n                                                    PagingView({\n                                                        ...props,\n                                                        onChange: page => {\n                                                            reportChange(page);\n                                                            return props.onChange(page);\n                                                        }\n                                                    })\n                                                }\n                                            />\n\n                                        </Grid> */}\n                                    </Grid>\n                                </ErrorBoundary>\n                            </div>\n                        );\n                    }}\n                </WithSearch>\n            </SearchProvider>\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}