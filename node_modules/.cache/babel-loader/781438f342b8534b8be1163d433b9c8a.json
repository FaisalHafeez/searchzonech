{"ast":null,"code":"import _toConsumableArray from\"/Users/pascalchristen/Documents/Development/ch-searchzone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import config from\"../config/engine.json\";export function getConfig(){if(process.env.NODE_ENV===\"test\"){return{};}if(config.engineName)return config;if(typeof window!==\"undefined\"&&window.appConfig&&window.appConfig.engineName){return window.appConfig;}return{};}function toLowerCase(string){if(string)return string.toLowerCase();}function capitalizeFirstLetter(string){return string.charAt(0).toUpperCase()+string.slice(1);}export function getTitleField(){// If no title field configuration has been provided, we attempt\n// to use a \"title\" field, if one exists\nreturn getConfig().titleField||\"title\";}export function getUrlField(){return getConfig().urlField;}export function getFacetFields(){return getConfig().facets||[];}export function getFacetFieldsNames(){return getConfig().facetsNames||[];}export function getSortFields(){return getConfig().sortFields||[];}export function getResultTitle(result){var titleField=getTitleField();return result.getSnippet(titleField);}// Because if a field is configured to display as a \"title\", we don't want\n// to display it again in the fields list\nexport function stripUnnecessaryResultFields(resultFields){return Object.keys(resultFields).reduce(function(acc,n){if([\"_meta\",\"id\",toLowerCase(getTitleField()),toLowerCase(getUrlField())].includes(toLowerCase(n))){return acc;}acc[n]=resultFields[n];return acc;},{});}export function buildSearchOptionsFromConfig(){var config=getConfig();var searchFields=(config.searchFields||config.fields||[]).reduce(function(acc,n){acc=acc||{};acc[n]={};return acc;},undefined);var resultFields=(config.resultFields||config.fields||[]).reduce(function(acc,n){acc=acc||{};acc[n]={raw:{},snippet:{size:100,fallback:true}};return acc;},undefined);// We can't use url or title fields unless they're actually\n// in the reuslts.\nif(config.urlField){resultFields[config.urlField]={raw:{},snippet:{size:100,fallback:true}};}if(config.titleField){resultFields[config.titleField]={raw:{},snippet:{size:100,fallback:true}};}var searchOptions={};searchOptions.result_fields=resultFields;searchOptions.search_fields=searchFields;return searchOptions;}export function buildFacetConfigFromConfig(){var config=getConfig();var facets=(config.facets||[]).reduce(function(acc,n){acc=acc||{};acc[n]={type:\"value\",size:250};return acc;},undefined);return facets;}export function buildSortOptionsFromConfig(){var config=getConfig();return[{name:\"Relevance\",value:\"\",direction:\"\"}].concat(_toConsumableArray((config.sortFields||[]).reduce(function(acc,sortField){acc.push({name:\"\".concat(capitalizeFirstLetter(sortField),\" ASC\"),value:sortField,direction:\"asc\"});acc.push({name:\"\".concat(capitalizeFirstLetter(sortField),\" DESC\"),value:sortField,direction:\"desc\"});return acc;},[])));}export function buildAutocompleteQueryConfig(){var querySuggestFields=getConfig().querySuggestFields;if(!querySuggestFields||!Array.isArray(querySuggestFields)||querySuggestFields.length===0){return{};}return{suggestions:{types:{documents:{fields:getConfig().querySuggestFields}}}};}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/ch-searchzone/src/config/config-helper.js"],"names":["config","getConfig","process","env","NODE_ENV","engineName","window","appConfig","toLowerCase","string","capitalizeFirstLetter","charAt","toUpperCase","slice","getTitleField","titleField","getUrlField","urlField","getFacetFields","facets","getFacetFieldsNames","facetsNames","getSortFields","sortFields","getResultTitle","result","getSnippet","stripUnnecessaryResultFields","resultFields","Object","keys","reduce","acc","n","includes","buildSearchOptionsFromConfig","searchFields","fields","undefined","raw","snippet","size","fallback","searchOptions","result_fields","search_fields","buildFacetConfigFromConfig","type","buildSortOptionsFromConfig","name","value","direction","sortField","push","buildAutocompleteQueryConfig","querySuggestFields","Array","isArray","length","suggestions","types","documents"],"mappings":"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","sourcesContent":["import config from \"../config/engine.json\";\n\nexport function getConfig() {\n  if (process.env.NODE_ENV === \"test\") {\n    return {};\n  }\n\n  if (config.engineName) return config;\n\n  if (\n    typeof window !== \"undefined\" &&\n    window.appConfig &&\n    window.appConfig.engineName\n  ) {\n    return window.appConfig;\n  }\n\n  return {};\n}\n\nfunction toLowerCase(string) {\n  if (string) return string.toLowerCase();\n}\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function getTitleField() {\n  // If no title field configuration has been provided, we attempt\n  // to use a \"title\" field, if one exists\n  return getConfig().titleField || \"title\";\n}\n\nexport function getUrlField() {\n  return getConfig().urlField;\n}\n\nexport function getFacetFields() {\n  return getConfig().facets || [];\n}\n\nexport function getFacetFieldsNames() {\n  return getConfig().facetsNames || [];\n}\n\nexport function getSortFields() {\n  return getConfig().sortFields || [];\n}\n\nexport function getResultTitle(result) {\n  const titleField = getTitleField();\n\n  return result.getSnippet(titleField);\n}\n\n// Because if a field is configured to display as a \"title\", we don't want\n// to display it again in the fields list\nexport function stripUnnecessaryResultFields(resultFields) {\n  return Object.keys(resultFields).reduce((acc, n) => {\n    if (\n      [\n        \"_meta\",\n        \"id\",\n        toLowerCase(getTitleField()),\n        toLowerCase(getUrlField())\n      ].includes(toLowerCase(n))\n    ) {\n      return acc;\n    }\n\n    acc[n] = resultFields[n];\n    return acc;\n  }, {});\n}\n\nexport function buildSearchOptionsFromConfig() {\n  const config = getConfig();\n  const searchFields = (config.searchFields || config.fields || []).reduce(\n    (acc, n) => {\n      acc = acc || {};\n      acc[n] = {};\n      return acc;\n    },\n    undefined\n  );\n\n  const resultFields = (config.resultFields || config.fields || []).reduce(\n    (acc, n) => {\n      acc = acc || {};\n      acc[n] = {\n        raw: {},\n        snippet: {\n          size: 100,\n          fallback: true\n        }\n      };\n      return acc;\n    },\n    undefined\n  );\n\n  // We can't use url or title fields unless they're actually\n  // in the reuslts.\n  if (config.urlField) {\n    resultFields[config.urlField] = {\n      raw: {},\n      snippet: {\n        size: 100,\n        fallback: true\n      }\n    };\n  }\n\n  if (config.titleField) {\n    resultFields[config.titleField] = {\n      raw: {},\n      snippet: {\n        size: 100,\n        fallback: true\n      }\n    };\n  }\n\n  const searchOptions = {};\n  searchOptions.result_fields = resultFields;\n  searchOptions.search_fields = searchFields;\n  return searchOptions;\n}\n\nexport function buildFacetConfigFromConfig() {\n  const config = getConfig();\n  const facets = (config.facets || []).reduce((acc, n) => {\n    acc = acc || {};\n    acc[n] = {\n      type: \"value\",\n      size: 250\n    };\n    return acc;\n  }, undefined);\n\n  return facets;\n}\n\nexport function buildSortOptionsFromConfig() {\n  const config = getConfig();\n  return [\n    {\n      name: \"Relevance\",\n      value: \"\",\n      direction: \"\"\n    },\n    ...(config.sortFields || []).reduce((acc, sortField) => {\n      acc.push({\n        name: `${capitalizeFirstLetter(sortField)} ASC`,\n        value: sortField,\n        direction: \"asc\"\n      });\n      acc.push({\n        name: `${capitalizeFirstLetter(sortField)} DESC`,\n        value: sortField,\n        direction: \"desc\"\n      });\n      return acc;\n    }, [])\n  ];\n}\n\nexport function buildAutocompleteQueryConfig() {\n  const querySuggestFields = getConfig().querySuggestFields;\n  if (\n    !querySuggestFields ||\n    !Array.isArray(querySuggestFields) ||\n    querySuggestFields.length === 0\n  ) {\n    return {};\n  }\n\n  return {\n    suggestions: {\n      types: {\n        documents: {\n          fields: getConfig().querySuggestFields\n        }\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}