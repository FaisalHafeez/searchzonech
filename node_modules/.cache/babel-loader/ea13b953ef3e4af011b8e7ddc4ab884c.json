{"ast":null,"code":"import _objectSpread from\"/Users/pascalchristen/Documents/Development/ch-searchzone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React from\"react\";import{withStyles}from'@material-ui/core/styles';import Card from'@material-ui/core/Card';import CardContent from'@material-ui/core/CardContent';import IconButton from'@material-ui/core/IconButton';import Typography from'@material-ui/core/Typography';import List from'@material-ui/core/List';import ListItem from'@material-ui/core/ListItem';import ListItemIcon from'@material-ui/core/ListItemIcon';import ListItemText from'@material-ui/core/ListItemText';import Dns from'@material-ui/icons/Dns';import Divider from'@material-ui/core/Divider';import{TextFields,VpnKey,MailOutline,VerifiedUser,AlternateEmail,Filter6,Filter4,DeleteForever}from'@material-ui/icons';var StyledCard=withStyles({root:{marginBottom:'10px',paddingBottom:'5px',width:'90%'}})(Card);var StyledListItem=withStyles({root:{paddingTop:'5px',paddingBottom:'0px'}})(ListItem);function getFieldType(result,field,type){if(result[field])return result[field][type];}function getRaw(result,field){return getFieldType(result,field,\"raw\");}function htmlEscape(str){if(!str)return\"\";return String(str).replace(/&/g,\"&amp;\")//.replace(/\"/g, \"&quot;\")\n.replace(/'/g,\"&#39;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");}export function isFieldValueWrapper(object){return object&&(object.hasOwnProperty(\"raw\")||object.hasOwnProperty(\"snippet\")&&!object.hasOwnProperty(\"score\"));}function getEscapedField(result,field){// Fallback to raw values here, because non-string fields\n// will not have a snippet fallback. Raw values MUST be html escaped.\nvar safeField=htmlEscape(getRaw(result,field));safeField=safeField.replaceAll(\",\",\"\\n\");return Array.isArray(safeField)?safeField.join(\",\"):safeField;}function getEscapedFields(result){return Object.keys(result).reduce(function(acc,field){// If we receive an arbitrary value from the response, we may not properly\n// handle it, so we should filter out arbitrary values here.\n//\n// I.e.,\n// Arbitrary value: \"_metaField: '1939191'\"\n// vs.\n// FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n//if (!isFieldValueWrapper(result[field])) return acc;\n//console.log(field)\nif(field==='id'){//console.log(\"remove\" + field)\n//return { ...acc, [field]: getEscapedField(result, field) };\n}//console.log(getEscapedField(result, field))\nreturn _objectSpread(_objectSpread({},acc),{},{[field]:getEscapedField(result,field)});},{});}function generateListItems(result,icon,field){var DynamicIconButton=icon;var resultField=result[field];if(resultField!==undefined){return/*#__PURE__*/React.createElement(StyledListItem,null,/*#__PURE__*/React.createElement(ListItemIcon,null,/*#__PURE__*/React.createElement(DynamicIconButton,null)),/*#__PURE__*/React.createElement(ListItemText,{multiline:\"true\",style:{wordWrap:\"break-word\"},primary:resultField}));}}function generateButtonItems(result,icon,field){var DynamicIconButton=icon;var resultField=result[field];if(resultField!==undefined){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(IconButton,{size:\"small\",disabled:true},/*#__PURE__*/React.createElement(DynamicIconButton,null)));}}export default function(_ref){var result=_ref.result;var fields=getEscapedFields(result);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(StyledCard,null,/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(Typography,{variant:\"h5\",component:\"h2\",color:\"primary\"},fields.domain,/*#__PURE__*/React.createElement(React.Fragment,null,generateButtonItems(fields,(fields===null||fields===void 0?void 0:fields.valid_domain)==='true'?VerifiedUser:DeleteForever,\"valid_domain\"),generateButtonItems(fields,MailOutline,\"valid_info\"))),/*#__PURE__*/React.createElement(Divider,null),/*#__PURE__*/React.createElement(Typography,{variant:\"body2\",color:\"textPrimary\",style:{whiteSpace:'pre-line'},component:\"a\"},/*#__PURE__*/React.createElement(List,null,generateListItems(fields,Dns,\"ns\"),generateListItems(fields,Filter4,\"a\"),generateListItems(fields,Filter6,\"aaaa\"),generateListItems(fields,AlternateEmail,\"mx\"),generateListItems(fields,TextFields,\"txt\"),generateListItems(fields,VpnKey,\"dnskey\"))))));}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/ch-searchzone/src/components/StyledResult.js"],"names":["React","withStyles","Card","CardContent","IconButton","Typography","List","ListItem","ListItemIcon","ListItemText","Dns","Divider","TextFields","VpnKey","MailOutline","VerifiedUser","AlternateEmail","Filter6","Filter4","DeleteForever","StyledCard","root","marginBottom","paddingBottom","width","StyledListItem","paddingTop","getFieldType","result","field","type","getRaw","htmlEscape","str","String","replace","isFieldValueWrapper","object","hasOwnProperty","getEscapedField","safeField","replaceAll","Array","isArray","join","getEscapedFields","Object","keys","reduce","acc","generateListItems","icon","DynamicIconButton","resultField","undefined","wordWrap","generateButtonItems","fields","domain","valid_domain","whiteSpace"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Dns from '@material-ui/icons/Dns';\nimport Divider from '@material-ui/core/Divider';\nimport { TextFields, VpnKey, MailOutline, VerifiedUser, AlternateEmail, Filter6, Filter4, DeleteForever } from '@material-ui/icons';\n\nconst StyledCard = withStyles({\n    root: {\n        marginBottom: '10px',\n        paddingBottom: '5px',\n        width: '90%',\n    },\n})(Card);\n\nconst StyledListItem = withStyles({\n    root: {\n        paddingTop: '5px',\n        paddingBottom: '0px',\n    },\n})(ListItem);\n\nfunction getFieldType(result, field, type) {\n    if (result[field]) return result[field][type];\n}\n\nfunction getRaw(result, field) {\n    return getFieldType(result, field, \"raw\");\n}\nfunction htmlEscape(str) {\n    if (!str) return \"\";\n\n    return String(str)\n        .replace(/&/g, \"&amp;\")\n        //.replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#39;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\");\n}\n\nexport function isFieldValueWrapper(object) {\n    return (\n        object && (object.hasOwnProperty(\"raw\") || object.hasOwnProperty(\"snippet\") && !object.hasOwnProperty(\"score\"))\n    );\n}\n\nfunction getEscapedField(result, field) {\n    // Fallback to raw values here, because non-string fields\n    // will not have a snippet fallback. Raw values MUST be html escaped.\n    let safeField =\n        htmlEscape(getRaw(result, field));\n    safeField = safeField.replaceAll(\",\", \"\\n\");\n    return Array.isArray(safeField) ? safeField.join(\",\") : safeField;\n}\n\nfunction getEscapedFields(result) {\n    return Object.keys(result).reduce((acc, field) => {\n        // If we receive an arbitrary value from the response, we may not properly\n        // handle it, so we should filter out arbitrary values here.\n        //\n        // I.e.,\n        // Arbitrary value: \"_metaField: '1939191'\"\n        // vs.\n        // FieldValueWrapper: \"_metaField: {raw: '1939191'}\"\n        //if (!isFieldValueWrapper(result[field])) return acc;\n        //console.log(field)\n        if (field === 'id') {\n            //console.log(\"remove\" + field)\n            //return { ...acc, [field]: getEscapedField(result, field) };\n        }\n        //console.log(getEscapedField(result, field))\n        return { ...acc, [field]: getEscapedField(result, field) };\n\n    }, {});\n}\n\nfunction generateListItems(result, icon, field) {\n    const DynamicIconButton = icon;\n    const resultField = result[field]\n    if (resultField !== undefined) {\n        return (\n            <StyledListItem>\n                <ListItemIcon>\n                    <DynamicIconButton />\n                </ListItemIcon>\n                <ListItemText multiline=\"true\" style={{ wordWrap: \"break-word\" }}\n                    primary={resultField}\n                />\n            </StyledListItem>\n        );\n    }\n}\n\nfunction generateButtonItems(result, icon, field) {\n    const DynamicIconButton = icon;\n    const resultField = result[field]\n    if (resultField !== undefined) {\n        return (\n            <>\n                <IconButton size=\"small\" disabled>\n                    <DynamicIconButton />\n                </IconButton>\n            </>\n        );\n    }\n}\n\nexport default function ({ result }) {\n    const fields = getEscapedFields(result);\n    return (\n        <>\n            <StyledCard>\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\" color=\"primary\">\n                        {fields.domain}\n                        <>\n                            {(generateButtonItems(fields, (fields?.valid_domain === 'true') ? VerifiedUser : DeleteForever, \"valid_domain\"))}\n                            {(generateButtonItems(fields, MailOutline, \"valid_info\"))}\n                        </>\n                    </Typography>\n\n                    <Divider />\n                    <Typography variant=\"body2\" color=\"textPrimary\" style={{ whiteSpace: 'pre-line' }} component=\"a\">\n                        <List>\n                            {(generateListItems(fields, Dns, \"ns\"))}\n                            {(generateListItems(fields, Filter4, \"a\"))}\n                            {(generateListItems(fields, Filter6, \"aaaa\"))}\n                            {(generateListItems(fields, AlternateEmail, \"mx\"))}\n                            {(generateListItems(fields, TextFields, \"txt\"))}\n                            {(generateListItems(fields, VpnKey, \"dnskey\"))}\n                        </List>\n                    </Typography>\n                </CardContent>\n            </StyledCard>\n\n        </>\n    );\n\n}"]},"metadata":{},"sourceType":"module"}