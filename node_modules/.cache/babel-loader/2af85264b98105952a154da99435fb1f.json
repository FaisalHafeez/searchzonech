{"ast":null,"code":"import _objectSpread from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/pascalchristen/Documents/Development/searchzone-website/src/views/SearchBox.js\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\nimport { Result } from \"./types\";\nimport { Suggestion } from \"./types\";\nimport { appendClassName } from \"./view-helpers\";\nimport Autocomplete from \"./Autocomplete\";\nimport SearchInput from \"./SearchInput\";\n\nfunction SearchBox(props) {\n  var _this = this;\n\n  var className = props.className,\n      allAutocompletedItemsCount = props.allAutocompletedItemsCount,\n      autocompleteView = props.autocompleteView,\n      isFocused = props.isFocused,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,\n      inputView = props.inputView,\n      onChange = props.onChange,\n      onSelectAutocomplete = props.onSelectAutocomplete,\n      _onSubmit = props.onSubmit,\n      useAutocomplete = props.useAutocomplete,\n      value = props.value,\n      autocompletedResults = props.autocompletedResults,\n      autocompletedSuggestions = props.autocompletedSuggestions,\n      autocompletedSuggestionsCount = props.autocompletedSuggestionsCount,\n      completeSuggestion = props.completeSuggestion,\n      notifyAutocompleteSelected = props.notifyAutocompleteSelected,\n      rest = _objectWithoutProperties(props, [\"className\", \"allAutocompletedItemsCount\", \"autocompleteView\", \"isFocused\", \"inputProps\", \"inputView\", \"onChange\", \"onSelectAutocomplete\", \"onSubmit\", \"useAutocomplete\", \"value\", \"autocompletedResults\", \"autocompletedSuggestions\", \"autocompletedSuggestionsCount\", \"completeSuggestion\", \"notifyAutocompleteSelected\"]);\n\n  var focusedClass = isFocused ? \"focus\" : \"\";\n  var AutocompleteView = autocompleteView || Autocomplete;\n  var InputView = inputView || SearchInput;\n  return /*#__PURE__*/React.createElement(Downshift, Object.assign({\n    inputValue: value,\n    onChange: onSelectAutocomplete,\n    onInputValueChange: function onInputValueChange(newValue) {\n      // To avoid over dispatching\n      if (value === newValue) return;\n      onChange(newValue);\n    } // Because when a selection is made, we don't really want to change\n    // the inputValue. This is supposed to be a \"controlled\" value, and when\n    // this happens we lose control of it.\n    ,\n    itemToString: function itemToString() {\n      return value;\n    }\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), function (downshiftProps) {\n    var closeMenu = downshiftProps.closeMenu,\n        _getInputProps = downshiftProps.getInputProps,\n        isOpen = downshiftProps.isOpen;\n    var autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: function onSubmit(e) {\n        closeMenu();\n\n        _onSubmit(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: appendClassName(\"sui-search-box\", className) + autocompleteClass,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(InputView, Object.assign({}, downshiftProps, {\n      getInputProps: function getInputProps(additionalProps) {\n        var _ref = additionalProps || {},\n            className = _ref.className,\n            rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n        return _getInputProps(_objectSpread(_objectSpread({\n          placeholder: \"Search\"\n        }, inputProps), {}, {\n          className: appendClassName(\"sui-search-box__text-input\", [inputProps.className, className, focusedClass])\n        }, rest));\n      },\n      getButtonProps: function getButtonProps(additionalProps) {\n        var _ref2 = additionalProps || {},\n            className = _ref2.className,\n            rest = _objectWithoutProperties(_ref2, [\"className\"]);\n\n        return _objectSpread({\n          type: \"submit\",\n          value: \"Search\",\n          className: appendClassName(\"button sui-search-box__submit\", className)\n        }, rest);\n      },\n      getAutocomplete: function getAutocomplete() {\n        if (useAutocomplete && isOpen && allAutocompletedItemsCount > 0) {\n          return /*#__PURE__*/React.createElement(AutocompleteView, Object.assign({}, props, downshiftProps, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 48\n            }\n          }));\n        } else {\n          return null;\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    }))));\n  });\n}\n\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    titleField: PropTypes.string.isRequired,\n    urlField: PropTypes.string.isRequired,\n    linkTarget: PropTypes.string,\n    sectionTitle: PropTypes.string\n  })]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }), PropTypes.objectOf(PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }))]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\nexport default SearchBox;","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/searchzone-website/src/views/SearchBox.js"],"names":["PropTypes","React","Downshift","Result","Suggestion","appendClassName","Autocomplete","SearchInput","SearchBox","props","className","allAutocompletedItemsCount","autocompleteView","isFocused","inputProps","inputView","onChange","onSelectAutocomplete","onSubmit","useAutocomplete","value","autocompletedResults","autocompletedSuggestions","autocompletedSuggestionsCount","completeSuggestion","notifyAutocompleteSelected","rest","focusedClass","AutocompleteView","InputView","newValue","downshiftProps","closeMenu","getInputProps","isOpen","autocompleteClass","e","additionalProps","placeholder","type","propTypes","number","isRequired","arrayOf","objectOf","func","string","autocompleteResults","oneOfType","bool","shape","titleField","urlField","linkTarget","sectionTitle","autocompleteSuggestions","exact","object"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\n\nimport { Result } from \"./types\";\nimport { Suggestion } from \"./types\";\nimport { appendClassName } from \"./view-helpers\";\n\nimport Autocomplete from \"./Autocomplete\";\nimport SearchInput from \"./SearchInput\";\n\nfunction SearchBox(props) {\n    const {\n        className,\n        allAutocompletedItemsCount,\n        autocompleteView,\n        isFocused,\n        inputProps = {},\n        inputView,\n        onChange,\n        onSelectAutocomplete,\n        onSubmit,\n        useAutocomplete,\n        value,\n        // NOTE: These are explicitly de-structured but not used so that they are\n        // not passed through to the input with the 'rest' parameter\n        // eslint-disable-next-line no-unused-vars\n        autocompletedResults,\n        // eslint-disable-next-line no-unused-vars\n        autocompletedSuggestions,\n        // eslint-disable-next-line no-unused-vars\n        autocompletedSuggestionsCount,\n        // eslint-disable-next-line no-unused-vars\n        completeSuggestion,\n        // eslint-disable-next-line no-unused-vars\n        notifyAutocompleteSelected,\n        ...rest\n    } = props;\n    const focusedClass = isFocused ? \"focus\" : \"\";\n    const AutocompleteView = autocompleteView || Autocomplete;\n    const InputView = inputView || SearchInput;\n\n    return (\n        <Downshift\n            inputValue={value}\n            onChange={onSelectAutocomplete}\n            onInputValueChange={newValue => {\n                // To avoid over dispatching\n                if (value === newValue) return;\n                onChange(newValue);\n            }}\n            // Because when a selection is made, we don't really want to change\n            // the inputValue. This is supposed to be a \"controlled\" value, and when\n            // this happens we lose control of it.\n            itemToString={() => value}\n            {...rest}\n        >\n            {downshiftProps => {\n                const { closeMenu, getInputProps, isOpen } = downshiftProps;\n                let autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n                return (\n                    <form\n                        onSubmit={e => {\n                            closeMenu();\n                            onSubmit(e);\n                        }}\n                    >\n                        <div\n                            className={\n                                appendClassName(\"sui-search-box\", className) + autocompleteClass\n                            }\n                        >\n                            <InputView\n                                {...downshiftProps}\n                                getInputProps={additionalProps => {\n                                    const { className, ...rest } = additionalProps || {};\n                                    return getInputProps({\n                                        placeholder: \"Search\",\n                                        ...inputProps,\n                                        className: appendClassName(\"sui-search-box__text-input\", [\n                                            inputProps.className,\n                                            className,\n                                            focusedClass\n                                        ]),\n                                        ...rest\n                                    });\n                                }}\n                                getButtonProps={additionalProps => {\n                                    const { className, ...rest } = additionalProps || {};\n                                    return {\n                                        type: \"submit\",\n                                        value: \"Search\",\n                                        className: appendClassName(\n                                            \"button sui-search-box__submit\",\n                                            className\n                                        ),\n                                        ...rest\n                                    };\n                                }}\n                                getAutocomplete={() => {\n                                    if (\n                                        useAutocomplete &&\n                                        isOpen &&\n                                        allAutocompletedItemsCount > 0\n                                    ) {\n                                        return <AutocompleteView {...props} {...downshiftProps} />;\n                                    } else {\n                                        return null;\n                                    }\n                                }}\n                            />\n                        </div>\n                    </form>\n                );\n            }}\n        </Downshift>\n    );\n}\n\nSearchBox.propTypes = {\n    // Provided by container\n    allAutocompletedItemsCount: PropTypes.number.isRequired,\n    autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n    autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion))\n        .isRequired,\n    autocompletedSuggestionsCount: PropTypes.number.isRequired,\n    completeSuggestion: PropTypes.func.isRequired,\n    notifyAutocompleteSelected: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    value: PropTypes.string.isRequired,\n    autocompleteResults: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.shape({\n            titleField: PropTypes.string.isRequired,\n            urlField: PropTypes.string.isRequired,\n            linkTarget: PropTypes.string,\n            sectionTitle: PropTypes.string\n        })\n    ]),\n    autocompleteView: PropTypes.func,\n    autocompleteSuggestions: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.exact({\n            sectionTitle: PropTypes.string\n        }),\n        PropTypes.objectOf(\n            PropTypes.exact({\n                sectionTitle: PropTypes.string\n            })\n        )\n    ]),\n    className: PropTypes.string,\n    inputProps: PropTypes.object,\n    inputView: PropTypes.func,\n    isFocused: PropTypes.bool,\n    useAutocomplete: PropTypes.bool,\n\n    // Specific configuration for this view only\n    onSelectAutocomplete: PropTypes.func\n};\n\nexport default SearchBox;"]},"metadata":{},"sourceType":"module"}