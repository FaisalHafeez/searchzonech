{"ast":null,"code":"import _objectSpread from \"/Users/pascalchristen/Documents/Development/searchzone-website/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/pascalchristen/Documents/Development/searchzone-website/src/views/Home.js\";\nimport React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport PacmanLoader from \"react-spinners/ScaleLoader\";\nimport { ErrorBoundary, Facet, SearchProvider, SearchBox, Results, PagingInfo, ResultsPerPage, Paging, Sorting, WithSearch } from \"@elastic/react-search-ui\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Layout } from \"@elastic/react-search-ui-views\"; //import \"@elastic/react-search-ui-views/lib/styles/styles.css\";\n\nimport { buildAutocompleteQueryConfig, buildFacetConfigFromConfig, buildSearchOptionsFromConfig, buildSortOptionsFromConfig, getConfig, getFacetFields } from \"../config/config-helper\";\nimport Button from '@material-ui/core/Button';\nimport SearchBar from \"material-ui-search-bar\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport DirectionsIcon from '@material-ui/icons/Directions';\n\nvar _getConfig = getConfig(),\n    hostIdentifier = _getConfig.hostIdentifier,\n    searchKey = _getConfig.searchKey,\n    endpointBase = _getConfig.endpointBase,\n    engineName = _getConfig.engineName;\n\nvar connector = new AppSearchAPIConnector({\n  searchKey,\n  engineName,\n  hostIdentifier,\n  endpointBase\n});\nvar config = {\n  searchQuery: _objectSpread({\n    facets: buildFacetConfigFromConfig()\n  }, buildSearchOptionsFromConfig()),\n  autocompleteQuery: buildAutocompleteQueryConfig(),\n  apiConnector: connector,\n  alwaysSearchOnInitialLoad: true,\n  initialState: {\n    resultsPerPage: 5\n  }\n};\nexport default function Home() {\n  var _this = this;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SearchProvider, {\n    config: config,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(WithSearch, {\n    mapContextToProps: function mapContextToProps(_ref) {\n      var wasSearched = _ref.wasSearched,\n          isLoading = _ref.isLoading;\n      return {\n        wasSearched,\n        isLoading\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, function (_ref2) {\n    var wasSearched = _ref2.wasSearched,\n        isLoading = _ref2.isLoading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ErrorBoundary, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Layout, {\n      header:\n      /*#__PURE__*/\n      //<SearchBox autocompleteSuggestions={true} searchAsYouType={false} autocompleteMinimumCharacters={3} />\n      //<CustomizedInputBase></CustomizedInputBase>\n      // <SearchBox\n      //     autocompleteSuggestions={true}\n      //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n      //         <>\n      //             <SearchBar\n      //                 onRequestSearch={() => console.log('onRequestSearch')}\n      //                 style={{\n      //                     margin: '0 auto',\n      //                     maxWidth: 800\n      //                 }}\n      //             />\n      //             {getAutocomplete()}\n      //         </>\n      //     )}\n      // />\n      // <SearchBox autocompleteSuggestions={true}\n      //     view={({ onChange, value, onSubmit }) => (\n      //         <form onSubmit={onSubmit}>\n      //             <SearchBar onChange={() => console.log('onChange')}\n      //                 onRequestSearch={() => console.log('onRequestSearch')} />\n      //         </form>\n      //     )}\n      //     />\n      React.createElement(SearchBox, {\n        autocompleteSuggestions: true,\n        inputView: function inputView(_ref3) {\n          var getAutocomplete = _ref3.getAutocomplete,\n              getInputProps = _ref3.getInputProps,\n              getButtonProps = _ref3.getButtonProps;\n          return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SearchBar, Object.assign({}, getInputProps({\n            placeholder: 'Search zonefile'\n          }), {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }\n          })), getAutocomplete());\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 49\n        }\n      }),\n      sideContent: /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 45\n        }\n      }, !isLoading && wasSearched && /*#__PURE__*/React.createElement(Sorting, {\n        label: \"Sort by\",\n        sortOptions: buildSortOptionsFromConfig(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 53\n        }\n      }), getFacetFields().map(function (field) {\n        return /*#__PURE__*/React.createElement(Facet, {\n          key: field,\n          field: field,\n          label: field,\n          isFilterable: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 53\n          }\n        });\n      })),\n      bodyContent: /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 45\n        }\n      }, isLoading && /*#__PURE__*/React.createElement(PacmanLoader, {\n        size: 100,\n        color: \"blue\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 53\n        }\n      }), wasSearched && /*#__PURE__*/React.createElement(Results, {\n        titleField: getConfig().titleField,\n        urlField: getConfig().urlField,\n        shouldTrackClickThrough: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 53\n        }\n      })),\n      bodyHeader: /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 45\n        }\n      }, wasSearched && /*#__PURE__*/React.createElement(PagingInfo, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 65\n        }\n      }), wasSearched && /*#__PURE__*/React.createElement(ResultsPerPage, {\n        options: [5, 10, 15],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 65\n        }\n      })),\n      bodyFooter: /*#__PURE__*/React.createElement(Paging, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 53\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 37\n      }\n    })));\n  })));\n}","map":{"version":3,"sources":["/Users/pascalchristen/Documents/Development/searchzone-website/src/views/Home.js"],"names":["React","AppSearchAPIConnector","PacmanLoader","ErrorBoundary","Facet","SearchProvider","SearchBox","Results","PagingInfo","ResultsPerPage","Paging","Sorting","WithSearch","CssBaseline","Layout","buildAutocompleteQueryConfig","buildFacetConfigFromConfig","buildSearchOptionsFromConfig","buildSortOptionsFromConfig","getConfig","getFacetFields","Button","SearchBar","AppBar","Toolbar","IconButton","Typography","InputBase","fade","makeStyles","MenuIcon","SearchIcon","TextField","Paper","Grid","Divider","DirectionsIcon","hostIdentifier","searchKey","endpointBase","engineName","connector","config","searchQuery","facets","autocompleteQuery","apiConnector","alwaysSearchOnInitialLoad","initialState","resultsPerPage","Home","wasSearched","isLoading","getAutocomplete","getInputProps","getButtonProps","placeholder","map","field","titleField","urlField"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport AppSearchAPIConnector from \"@elastic/search-ui-app-search-connector\";\nimport PacmanLoader from \"react-spinners/ScaleLoader\";\nimport {\n    ErrorBoundary,\n    Facet,\n    SearchProvider,\n    SearchBox,\n    Results,\n    PagingInfo,\n    ResultsPerPage,\n    Paging,\n    Sorting,\n    WithSearch\n} from \"@elastic/react-search-ui\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Layout } from \"@elastic/react-search-ui-views\";\n//import \"@elastic/react-search-ui-views/lib/styles/styles.css\";\nimport {\n    buildAutocompleteQueryConfig,\n    buildFacetConfigFromConfig,\n    buildSearchOptionsFromConfig,\n    buildSortOptionsFromConfig,\n    getConfig,\n    getFacetFields\n} from \"../config/config-helper\";\nimport Button from '@material-ui/core/Button';\nimport SearchBar from \"material-ui-search-bar\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport DirectionsIcon from '@material-ui/icons/Directions';\n\nconst { hostIdentifier, searchKey, endpointBase, engineName } = getConfig();\nconst connector = new AppSearchAPIConnector({\n    searchKey,\n    engineName,\n    hostIdentifier,\n    endpointBase\n});\nconst config = {\n    searchQuery: {\n        facets: buildFacetConfigFromConfig(),\n        ...buildSearchOptionsFromConfig()\n    },\n    autocompleteQuery: buildAutocompleteQueryConfig(),\n    apiConnector: connector,\n    alwaysSearchOnInitialLoad: true,\n    initialState: {\n        resultsPerPage: 5\n    }\n};\n\nexport default function Home() {\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <SearchProvider config={config}>\n                <WithSearch mapContextToProps={({ wasSearched, isLoading }) => ({ wasSearched, isLoading })}>\n                    {({ wasSearched, isLoading }) => {\n                        return (\n                            <div className=\"App\">\n                                <ErrorBoundary>\n                                    <Layout\n                                        header={\n                                            //<SearchBox autocompleteSuggestions={true} searchAsYouType={false} autocompleteMinimumCharacters={3} />\n                                            //<CustomizedInputBase></CustomizedInputBase>\n\n                                            // <SearchBox\n                                            //     autocompleteSuggestions={true}\n                                            //     inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n                                            //         <>\n                                            //             <SearchBar\n                                            //                 onRequestSearch={() => console.log('onRequestSearch')}\n                                            //                 style={{\n                                            //                     margin: '0 auto',\n                                            //                     maxWidth: 800\n                                            //                 }}\n                                            //             />\n                                            //             {getAutocomplete()}\n                                            //         </>\n                                            //     )}\n                                            // />\n                                            \n                                            // <SearchBox autocompleteSuggestions={true}\n                                            //     view={({ onChange, value, onSubmit }) => (\n                                            //         <form onSubmit={onSubmit}>\n                                            //             <SearchBar onChange={() => console.log('onChange')}\n                                            //                 onRequestSearch={() => console.log('onRequestSearch')} />\n                                            //         </form>\n                                            //     )}\n                                            //     />\n                                                <SearchBox\n      autocompleteSuggestions={true}\n      inputView={({ getAutocomplete, getInputProps, getButtonProps }) => (\n        <>\n              <SearchBar {...getInputProps({ placeholder: 'Search zonefile' })} />\n            {getAutocomplete()}\n        </>\n      )}\n    />\n                                        }\n                                        sideContent={\n                                            <div>\n                                                {!isLoading && wasSearched && (\n                                                    <Sorting\n                                                        label={\"Sort by\"}\n                                                        sortOptions={buildSortOptionsFromConfig()}\n                                                    />\n                                                )}\n                                                {getFacetFields().map(field => (\n                                                    <Facet key={field} field={field} label={field} isFilterable={true} />\n                                                ))}\n                                            </div>\n                                        }\n                                        bodyContent={\n                                            <div>\n\n                                                {isLoading && (\n                                                    <PacmanLoader size={100} color=\"blue\" />\n                                                )}\n                                                {wasSearched && (\n                                                    <Results\n                                                        titleField={getConfig().titleField}\n                                                        urlField={getConfig().urlField}\n                                                        shouldTrackClickThrough={true}\n                                                    />\n                                                )}\n                                            </div>\n                                        }\n                                        bodyHeader={\n                                            <React.Fragment>\n                                                {wasSearched && <PagingInfo />}\n                                                {wasSearched && <ResultsPerPage options={[5, 10, 15]} />}\n                                            </React.Fragment>\n                                        }\n                                        bodyFooter={<Paging />}\n                                    />\n                                </ErrorBoundary>\n                            </div>\n                        );\n                    }}\n                </WithSearch>\n            </SearchProvider>\n        </React.Fragment>\n    );\n}"]},"metadata":{},"sourceType":"module"}